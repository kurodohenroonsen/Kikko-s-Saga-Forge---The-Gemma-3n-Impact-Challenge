

--- START OF FILE app/build.gradle ---

/*
 * Copyright 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
  namespace = "com.google.ai.edge.aicore.demo"
  compileSdk 34

  defaultConfig {
    applicationId 'com.google.ai.edge.aicore.demo'
    minSdk 31
    targetSdk 34
    versionCode 1
    versionName '1.0'

    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  buildTypes {
    all {
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debug {
      isDefault true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    testBuildType "debug"
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

}

dependencies {
  implementation 'androidx.preference:preference-ktx:1.2.1'
  implementation 'androidx.recyclerview:recyclerview:1.3.2'
  implementation 'com.google.ai.edge.aicore:aicore:0.0.1-exp01'
  implementation 'com.google.android.material:material:1.12.0'
  implementation 'com.google.guava:guava:31.1-jre'
  implementation 'org.reactivestreams:reactive-streams:1.0.4'

  androidTestImplementation 'androidx.test:rules:1.6.1'
  androidTestImplementation 'androidx.test:runner:1.6.2'
  androidTestImplementation 'androidx.test.ext:junit:1.2.1'
  androidTestImplementation 'com.google.truth:truth:1.1.3'
}


--- END OF FILE app/build.gradle ---


--- START OF FILE app/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile


--- END OF FILE app/proguard-rules.pro ---


--- START OF FILE app/src/main/AndroidManifest.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.google.ai.edge.aicore.demo">

  <application
      android:label="@string/app_name"
      android:supportsRtl="true"
      android:taskAffinity = ""
      android:theme="@style/Theme.AiCoreSdkDemo">

    <activity
        android:name=".EntryChoiceActivity"
        android:exported="true"
        android:screenOrientation="portrait">
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
    </activity>

    <activity
        android:name=".java.MainActivity"
        android:exported="false"
        android:screenOrientation="portrait"/>

    <activity
        android:name=".kotlin.MainActivity"
        android:exported="false"
        android:screenOrientation="portrait"/>

  </application>

</manifest>


--- END OF FILE app/src/main/AndroidManifest.xml ---


--- START OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/ContentAdapter.kt ---

/*
 * Copyright 2024 Google LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.ai.edge.aicore.demo

import android.content.res.ColorStateList
import android.graphics.Color
import androidx.recyclerview.widget.RecyclerView
import android.util.Pair
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView

/** A [RecyclerView.Adapter] for displaying the request and response views. */
class ContentAdapter : RecyclerView.Adapter<ContentAdapter.ViewHolder>() {
  private val contentList: MutableList<Pair<Int, String>> = ArrayList()

  fun addContent(viewType: Int, content: String?) {
    contentList.add(Pair(viewType, content))
    notifyDataSetChanged()
  }

  fun updateStreamingResponse(response: String) {
    contentList[contentList.size - 1] = Pair(VIEW_TYPE_RESPONSE, response)
    notifyDataSetChanged()
  }

  override fun getItemViewType(position: Int): Int {
    return contentList[position].first
  }

  override fun onCreateViewHolder(viewGroup: ViewGroup, viewType: Int): ViewHolder {
    val layoutId =
      when (viewType) {
        VIEW_TYPE_REQUEST -> R.layout.row_item_request
        VIEW_TYPE_RESPONSE -> R.layout.row_item_response
        VIEW_TYPE_RESPONSE_ERROR -> R.layout.row_item_response
        else -> throw IllegalArgumentException("Invalid view type $viewType")
      }

    val layoutInflater = LayoutInflater.from(viewGroup.context)
    return ViewHolder(layoutInflater.inflate(layoutId, viewGroup, false))
  }

  override fun onBindViewHolder(viewHolder: ViewHolder, position: Int) {
    viewHolder.bind(contentList[position])
  }

  override fun getItemCount(): Int {
    return contentList.size
  }

  class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
    private val contentTextView: TextView
    private val defaultTextColors: ColorStateList

    init {
      contentTextView = view.findViewById(R.id.content_text_view)
      defaultTextColors = contentTextView.textColors
    }

    fun bind(content: Pair<Int, String>) {
      contentTextView.text = content.second
      if (content.first == VIEW_TYPE_RESPONSE_ERROR) {
        contentTextView.setTextColor(Color.RED)
      } else {
        contentTextView.setTextColor(defaultTextColors)
      }
    }
  }

  companion object {
    const val VIEW_TYPE_REQUEST = 0
    const val VIEW_TYPE_RESPONSE = 1
    const val VIEW_TYPE_RESPONSE_ERROR = 2
  }
}


--- END OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/ContentAdapter.kt ---


--- START OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/EntryChoiceActivity.kt ---

/*
 * Copyright 2024 Google LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.ai.edge.aicore.demo

import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import android.util.Log
import android.view.View
import android.widget.TextView
import android.widget.Toast
import androidx.lifecycle.lifecycleScope
import com.google.ai.edge.aicore.DownloadCallback
import com.google.ai.edge.aicore.DownloadConfig
import com.google.ai.edge.aicore.GenerativeAIException
import com.google.ai.edge.aicore.GenerativeModel
import com.google.ai.edge.aicore.demo.java.MainActivity
import com.google.ai.edge.aicore.generationConfig
import java.lang.String.format
import java.util.Locale
import kotlinx.coroutines.launch

class EntryChoiceActivity : AppCompatActivity() {

  private var modelDownloaded = false
  private var model: GenerativeModel? = null

  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_entry_choice)

    findViewById<TextView>(R.id.kotlin_entry_point).setOnClickListener {
      if (modelDownloaded) {
        val intent =
          Intent(
            this@EntryChoiceActivity,
            com.google.ai.edge.aicore.demo.kotlin.MainActivity::class.java,
          )
        startActivity(intent)
      } else {
        Toast.makeText(this, R.string.model_unavailable, Toast.LENGTH_SHORT).show()
      }
    }

    findViewById<TextView>(R.id.java_entry_point).setOnClickListener {
      if (modelDownloaded) {
        val intent = Intent(this@EntryChoiceActivity, MainActivity::class.java)
        startActivity(intent)
      } else {
        Toast.makeText(this, R.string.model_unavailable, Toast.LENGTH_SHORT).show()
      }
    }

    ensureModelDownloaded()
  }

  private fun ensureModelDownloaded() {
    val downloadProgressTextView = findViewById<TextView>(R.id.download_progress_text_view)
    var totalBytesToDownload = 0L
    val downloadConfig =
      DownloadConfig(
        object : DownloadCallback {
          override fun onDownloadStarted(bytesToDownload: Long) {
            totalBytesToDownload = bytesToDownload
          }

          override fun onDownloadFailed(failureStatus: String, e: GenerativeAIException) {
            Log.e(TAG, "Failed to download model.", e)
          }

          override fun onDownloadProgress(totalBytesDownloaded: Long) {
            if (totalBytesToDownload > 0) {
              downloadProgressTextView?.visibility = View.VISIBLE
              downloadProgressTextView?.text =
                format(
                  Locale.ENGLISH,
                  "Downloading model:  %d / %d MB (%.2f%%)",
                  totalBytesDownloaded / MEGABYTE,
                  totalBytesToDownload / MEGABYTE,
                  100.0 * totalBytesDownloaded / totalBytesToDownload,
                )
            }
          }

          override fun onDownloadCompleted() {
            modelDownloaded = true
          }
        }
      )

    model = GenerativeModel(generationConfig { context = applicationContext }, downloadConfig)
    lifecycleScope.launch {
      try {
        model?.prepareInferenceEngine()
      } catch (e: GenerativeAIException) {
        Log.e(TAG, "Failed to check model availability.", e)
        Toast.makeText(applicationContext, e.message, Toast.LENGTH_SHORT).show()
      }
    }
  }

  override fun onDestroy() {
    super.onDestroy()
    model?.close()
  }

  companion object {
    private const val TAG = "EntryChoiceActivity"
    private const val MEGABYTE = 1024 * 1024
  }
}


--- END OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/EntryChoiceActivity.kt ---


--- START OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/GenerationConfigDialog.kt ---

/*
 * Copyright 2024 Google LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.ai.edge.aicore.demo

import android.app.Activity
import android.app.AlertDialog
import android.app.Dialog
import android.content.DialogInterface
import android.os.Bundle
import androidx.fragment.app.DialogFragment
import android.widget.EditText
import com.google.ai.edge.aicore.demo.GenerationConfigUtils.getMaxOutputTokens
import com.google.ai.edge.aicore.demo.GenerationConfigUtils.getTemperature
import com.google.ai.edge.aicore.demo.GenerationConfigUtils.getTopK
import com.google.ai.edge.aicore.demo.GenerationConfigUtils.setMaxOutputTokens
import com.google.ai.edge.aicore.demo.GenerationConfigUtils.setTemperature
import com.google.ai.edge.aicore.demo.GenerationConfigUtils.setTopK

class GenerationConfigDialog : DialogFragment() {
  interface OnConfigUpdateListener {
    fun onConfigUpdated()
  }

  override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
    val activity: Activity = requireActivity()
    val builder = AlertDialog.Builder(activity)

    val view = layoutInflater.inflate(R.layout.dialog_generation_config, null)
    val temperatureEditText = view.findViewById<EditText>(R.id.temperature_edit_text)
    temperatureEditText.setText(getTemperature(activity).toString())
    val topKEditText = view.findViewById<EditText>(R.id.top_k_edit_text)
    topKEditText.setText(getTopK(activity).toString())
    val maxOutputTokensEditText = view.findViewById<EditText>(R.id.max_output_tokens_edit_text)
    maxOutputTokensEditText.setText(getMaxOutputTokens(activity).toString())

    builder
      .setView(view)
      .setPositiveButton(R.string.button_save) { _: DialogInterface, _: Int ->
        setTemperature(activity, temperatureEditText.text.toString().toFloat())
        setTopK(activity, topKEditText.text.toString().toInt())
        setMaxOutputTokens(activity, maxOutputTokensEditText.text.toString().toInt())
        if (activity is OnConfigUpdateListener) {
          (activity as OnConfigUpdateListener).onConfigUpdated()
        }
      }
      .setNegativeButton(R.string.button_cancel, null)
    return builder.create()
  }
}


--- END OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/GenerationConfigDialog.kt ---


--- START OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/GenerationConfigUtils.kt ---

/*
 * Copyright 2024 Google LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.ai.edge.aicore.demo

import android.content.Context
import androidx.preference.PreferenceManager

object GenerationConfigUtils {
  @JvmStatic
  fun getTemperature(context: Context): Float {
    return PreferenceManager.getDefaultSharedPreferences(context)
      .getFloat(context.getString(R.string.pref_key_temperature), 0.2f)
  }

  @JvmStatic
  fun setTemperature(context: Context, temperature: Float) {
    PreferenceManager.getDefaultSharedPreferences(context)
      .edit()
      .putFloat(context.getString(R.string.pref_key_temperature), temperature)
      .apply()
  }

  @JvmStatic
  fun getTopK(context: Context): Int {
    return PreferenceManager.getDefaultSharedPreferences(context)
      .getInt(context.getString(R.string.pref_key_top_k), 16)
  }

  @JvmStatic
  fun setTopK(context: Context, topK: Int) {
    PreferenceManager.getDefaultSharedPreferences(context)
      .edit()
      .putInt(context.getString(R.string.pref_key_top_k), topK)
      .apply()
  }

  @JvmStatic
  fun getMaxOutputTokens(context: Context): Int {
    return PreferenceManager.getDefaultSharedPreferences(context)
      .getInt(context.getString(R.string.pref_key_max_output_tokens), 256)
  }

  @JvmStatic
  fun setMaxOutputTokens(context: Context, maxTokenCount: Int) {
    PreferenceManager.getDefaultSharedPreferences(context)
      .edit()
      .putInt(context.getString(R.string.pref_key_max_output_tokens), maxTokenCount)
      .apply()
  }
}


--- END OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/GenerationConfigUtils.kt ---


--- START OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/kotlin/MainActivity.kt ---

/*
 * Copyright 2024 Google LLC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.ai.edge.aicore.demo.kotlin

import android.os.Bundle
import android.text.TextUtils
import android.widget.Button
import android.widget.CompoundButton
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.ai.edge.aicore.GenerativeAIException
import com.google.ai.edge.aicore.GenerativeModel
import com.google.ai.edge.aicore.demo.ContentAdapter
import com.google.ai.edge.aicore.demo.GenerationConfigDialog
import com.google.ai.edge.aicore.demo.GenerationConfigUtils
import com.google.ai.edge.aicore.demo.R
import com.google.ai.edge.aicore.generationConfig
import java.util.concurrent.Future
import kotlinx.coroutines.flow.onCompletion
import kotlinx.coroutines.future.future

/** Demonstrates the AICore SDK usage from Kotlin. */
class MainActivity : AppCompatActivity(), GenerationConfigDialog.OnConfigUpdateListener {

  private var requestEditText: EditText? = null
  private var sendButton: Button? = null
  private var streamingSwitch: CompoundButton? = null
  private var configButton: Button? = null
  private var contentRecyclerView: RecyclerView? = null
  private var model: GenerativeModel? = null
  private var useStreaming = false
  private var inGenerating = false
  private var generateContentFuture: Future<Unit>? = null

  private val contentAdapter = ContentAdapter()

  override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_main)

    requestEditText = findViewById(R.id.request_edit_text)
    sendButton = findViewById(R.id.send_button)
    sendButton!!.setOnClickListener {
      if (inGenerating) {
        generateContentFuture?.cancel(true)
        endGeneratingUi()
      } else {
        val request = requestEditText?.text.toString()
        if (TextUtils.isEmpty(request)) {
          Toast.makeText(this, R.string.prompt_is_empty, Toast.LENGTH_SHORT).show()
          return@setOnClickListener
        }

        contentAdapter.addContent(ContentAdapter.VIEW_TYPE_REQUEST, request)
        startGeneratingUi()
        generateContent(request)
      }
      inGenerating = !inGenerating
    }

    streamingSwitch = findViewById<CompoundButton>(R.id.streaming_switch)
    streamingSwitch!!.setOnCheckedChangeListener { _: CompoundButton, isChecked: Boolean ->
      useStreaming = isChecked
    }
    useStreaming = streamingSwitch!!.isChecked

    configButton = findViewById(R.id.config_button)
    configButton!!.setOnClickListener {
      GenerationConfigDialog().show(supportFragmentManager, null)
    }

    contentRecyclerView = findViewById<RecyclerView>(R.id.content_recycler_view)
    contentRecyclerView!!.layoutManager = LinearLayoutManager(this)
    contentRecyclerView!!.adapter = contentAdapter

    initGenerativeModel()
  }

  override fun onDestroy() {
    super.onDestroy()
    model?.close()
  }

  private fun initGenerativeModel() {
    model =
      GenerativeModel(
        generationConfig {
          context = applicationContext
          temperature = GenerationConfigUtils.getTemperature(applicationContext)
          topK = GenerationConfigUtils.getTopK(applicationContext)
          maxOutputTokens = GenerationConfigUtils.getMaxOutputTokens(applicationContext)
        }
      )
  }

  private fun generateContent(request: String) {
    generateContentFuture =
      lifecycleScope.future {
        try {
          if (useStreaming) {
            var hasFirstStreamingResult = false
            var result = ""
            model!!
              .generateContentStream(request)
              .onCompletion { endGeneratingUi() }
              .collect { response ->
                run {
                  result += response.text
                  if (hasFirstStreamingResult) {
                    contentAdapter.updateStreamingResponse(result)
                  } else {
                    contentAdapter.addContent(ContentAdapter.VIEW_TYPE_RESPONSE, result)
                    hasFirstStreamingResult = true
                  }
                }
              }
          } else {
            val response = model!!.generateContent(request)
            contentAdapter.addContent(ContentAdapter.VIEW_TYPE_RESPONSE, response.text!!)
            endGeneratingUi()
          }
        } catch (e: GenerativeAIException) {
          contentAdapter.addContent(ContentAdapter.VIEW_TYPE_RESPONSE_ERROR, e.message!!)
          endGeneratingUi()
        }
      }
  }

  private fun startGeneratingUi() {
    sendButton?.setText(R.string.button_cancel)
    requestEditText?.setText(R.string.empty)
    streamingSwitch?.isEnabled = false
    configButton?.isEnabled = false
  }

  private fun endGeneratingUi() {
    sendButton?.setText(R.string.button_send)
    streamingSwitch?.isEnabled = true
    configButton?.isEnabled = true
    contentRecyclerView?.smoothScrollToPosition(contentAdapter.itemCount - 1)
  }

  override fun onConfigUpdated() {
    model?.close()
    initGenerativeModel()
  }
}


--- END OF FILE app/src/main/java/com/google/ai/edge/aicore/demo/kotlin/MainActivity.kt ---


--- START OF FILE app/src/main/res/layout/activity_entry_choice.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_gravity="center"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:orientation="vertical">

    <TextView
        android:id="@+id/download_progress_text_view"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="36dp"
        android:visibility="gone"/>

    <TextView
        android:background="@drawable/list_item_background"
        android:id="@+id/kotlin_entry_point"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="@dimen/activity_vertical_margin"
        android:padding="20dp"
        android:text="@string/kotlin_entry_title"
        android:textSize="26sp" />

    <TextView
        android:background="@drawable/list_item_background"
        android:id="@+id/java_entry_point"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="@dimen/activity_vertical_margin"
        android:padding="20dp"
        android:text="@string/java_entry_title"
        android:textSize="26sp" />
</LinearLayout>


--- END OF FILE app/src/main/res/layout/activity_entry_choice.xml ---


--- START OF FILE app/src/main/res/layout/activity_main.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_margin="4dp"
    android:orientation="vertical">

  <LinearLayout
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:gravity="end"
      android:orientation="horizontal">

    <com.google.android.material.switchmaterial.SwitchMaterial
        android:id="@+id/streaming_switch"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="end"
        android:checked="true"
        android:text="@string/streaming_switch" />

    <Button
        android:id="@+id/config_button"
        style="?attr/materialButtonOutlinedStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="4dp"
        android:text="@string/button_change_config" />

  </LinearLayout>

  <androidx.recyclerview.widget.RecyclerView
      android:id="@+id/content_recycler_view"
      android:layout_width="match_parent"
      android:layout_height="0dp"
      android:layout_weight="1" />

  <LinearLayout
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:orientation="horizontal">

    <EditText
        android:id="@+id/request_edit_text"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:importantForAutofill="no"
        android:inputType="textMultiLine"
        tools:ignore="LabelFor" />

    <Button
        android:id="@+id/send_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/button_send" />

  </LinearLayout>

</LinearLayout>


--- END OF FILE app/src/main/res/layout/activity_main.xml ---


--- START OF FILE app/src/main/res/layout/dialog_generation_config.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/generation_config"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

  <com.google.android.material.textfield.TextInputLayout
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:hint="@string/hint_temperature">

    <com.google.android.material.textfield.TextInputEditText
        android:id="@+id/temperature_edit_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:inputType="numberDecimal" />

  </com.google.android.material.textfield.TextInputLayout>

  <com.google.android.material.textfield.TextInputLayout
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:hint="@string/hint_top_k">

    <com.google.android.material.textfield.TextInputEditText
        android:id="@+id/top_k_edit_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:inputType="numberSigned" />

  </com.google.android.material.textfield.TextInputLayout>

  <com.google.android.material.textfield.TextInputLayout
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:hint="@string/hint_max_output_tokens">

    <com.google.android.material.textfield.TextInputEditText
        android:id="@+id/max_output_tokens_edit_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:inputType="numberSigned" />

  </com.google.android.material.textfield.TextInputLayout>

</LinearLayout>


--- END OF FILE app/src/main/res/layout/dialog_generation_config.xml ---


--- START OF FILE app/src/main/res/layout/row_item_request.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="48dp"
    android:layout_marginEnd="4dp"
    android:layout_marginVertical="8dp"
    android:orientation="vertical">

  <TextView
      android:id="@+id/content_text_view"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:layout_gravity="end"
      android:padding="8dp"
      android:background="@drawable/request_item_background" />

</LinearLayout>


--- END OF FILE app/src/main/res/layout/row_item_request.xml ---


--- START OF FILE app/src/main/res/layout/row_item_response.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="4dp"
    android:layout_marginEnd="48dp"
    android:layout_marginVertical="8dp"
    android:orientation="vertical">

  <TextView
      android:id="@+id/content_text_view"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:padding="8dp"
      android:background="@drawable/response_item_background" />

</LinearLayout>


--- END OF FILE app/src/main/res/layout/row_item_response.xml ---


--- START OF FILE app/src/main/res/values/colors.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<resources>
  <color name="purple_200">#FFBB86FC</color>
  <color name="purple_500">#FF6200EE</color>
  <color name="purple_700">#FF3700B3</color>
  <color name="teal_200">#FF03DAC5</color>
  <color name="teal_700">#FF018786</color>
  <color name="black">#FF000000</color>
  <color name="blue">#FF4286f4</color>
  <color name="white">#FFFFFFFF</color>
</resources>


--- END OF FILE app/src/main/res/values/colors.xml ---


--- START OF FILE app/src/main/res/values/dimens.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<resources>
    <!-- Default screen margins, per the Android Design guidelines. -->
    <dimen name="activity_horizontal_margin">16dp</dimen>
    <dimen name="activity_vertical_margin">16dp</dimen>
</resources>


--- END OF FILE app/src/main/res/values/dimens.xml ---


--- START OF FILE app/src/main/res/values/strings.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<resources>
  <string name="app_name" translatable="false">Gemini Nano demo</string>
  <string name="kotlin_entry_title" translatable="false">Run the demo written in Kotlin</string>
  <string name="java_entry_title" translatable="false">Run the demo written in Java</string>
  <string name="button_send" translatable="false">Send</string>
  <string name="generating" translatable="false">Generating...</string>
  <string name="streaming_switch" translatable="false">Streaming</string>
  <string name="hint_temperature" translatable="false">Temperature</string>
  <string name="hint_top_k" translatable="false">TopK</string>
  <string name="hint_max_output_tokens" translatable="false">MaxOutputTokens</string>
  <string name="pref_key_temperature" translatable="false">pk_temp</string>
  <string name="pref_key_top_k" translatable="false">pk_topk</string>
  <string name="pref_key_max_output_tokens" translatable="false">pk_mot</string>
  <string name="button_change_config" translatable="false">Change config</string>
  <string name="button_save" translatable="false">Save</string>
  <string name="button_cancel" translatable="false">Cancel</string>
  <string name="model_unavailable" translatable="false">Model is unavailable yet and downloading in background</string>
  <string name="prompt_is_empty" translatable="false">Please enter an non empty prompt</string>
  <string name="empty" translatable="false"/>
</resources>


--- END OF FILE app/src/main/res/values/strings.xml ---


--- START OF FILE app/src/main/res/values/themes.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright 2024 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<resources xmlns:tools="http://schemas.android.com/tools">
  <!-- Base application theme. -->
  <style name="Theme.AiCoreSdkDemo" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
    <!-- Primary brand color. -->
    <item name="colorPrimary">@color/purple_500</item>
    <item name="colorPrimaryVariant">@color/purple_700</item>
    <item name="colorOnPrimary">@color/white</item>
    <!-- Secondary brand color. -->
    <item name="colorSecondary">@color/teal_200</item>
    <item name="colorSecondaryVariant">@color/teal_700</item>
    <item name="colorOnSecondary">@color/black</item>
    <!-- Status bar color. -->
    <item name="android:statusBarColor">?attr/colorPrimaryVariant</item>
    <!-- Customize your theme here. -->
  </style>
</resources>


--- END OF FILE app/src/main/res/values/themes.xml ---


--- START OF FILE build.gradle ---

/*
 * Copyright 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext.kotlin_version = '1.9.0'

  repositories {
    google()
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:8.1.4'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
  }
}

allprojects {
  repositories {
    google()
    mavenCentral()
    mavenLocal()
  }
}

tasks.register('clean', Delete) {
  delete rootProject.buildDir
}


--- END OF FILE build.gradle ---


--- START OF FILE settings.gradle ---

/*
 * Copyright 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

rootProject.name = "Gemini Nano demo"
include ':app'


--- END OF FILE settings.gradle ---
