

--- START OF FILE app/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.jetbrains.kotlin.serialization)
    alias(libs.plugins.google.gms.google.services)
    alias(libs.plugins.hilt.plugin)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.android.ai.catalog"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.android.ai.catalog"
        minSdk = 26
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.navigation.compose)
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.androidx.navigation.runtime.ktx)
    implementation(libs.hilt.android)
    implementation(libs.hilt.navigation.compose)
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.ai)
    ksp(libs.hilt.compiler)

    implementation(project(":samples:gemini-multimodal"))
    implementation(project(":samples:gemini-chatbot"))
    implementation(project(":samples:genai-summarization"))
    implementation(project(":samples:genai-image-description"))
    implementation(project(":samples:genai-writing-assistance"))
    implementation(project(":samples:imagen"))
    implementation(project(":samples:magic-selfie"))
    implementation(project(":samples:gemini-video-summarization"))
    implementation(project(":samples:gemini-live-todo"))

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}


--- END OF FILE app/build.gradle.kts ---


--- START OF FILE app/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--- END OF FILE app/proguard-rules.pro ---


--- START OF FILE app/src/main/AndroidManifest.xml ---

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.RECORD_AUDIO" />

    <application
        android:allowBackup="true"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.AISampleCatalog"
        tools:targetApi="31"
        android:name=".CatalogApplication"
        android:enableOnBackInvokedCallback="true"
        >
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:windowSoftInputMode="adjustResize"
            android:theme="@style/Theme.AISampleCatalog">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <provider
            android:name="androidx.core.content.FileProvider"
            android:authorities="${applicationId}.provider"
            android:exported="false"
            android:grantUriPermissions="true">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/provider_paths" />
        </provider>
    </application>

</manifest>

--- END OF FILE app/src/main/AndroidManifest.xml ---


--- START OF FILE app/src/main/java/com/android/ai/catalog/CatalogApplication.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.catalog

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class CatalogApplication : Application()


--- END OF FILE app/src/main/java/com/android/ai/catalog/CatalogApplication.kt ---


--- START OF FILE app/src/main/java/com/android/ai/catalog/MainActivity.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.catalog

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.ui.Modifier
import com.android.ai.catalog.ui.CatalogApp
import com.android.ai.catalog.ui.theme.AISampleCatalogTheme
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            AISampleCatalogTheme {
                CatalogApp(modifier = Modifier.fillMaxSize())
            }
        }
    }
}


--- END OF FILE app/src/main/java/com/android/ai/catalog/MainActivity.kt ---


--- START OF FILE app/src/main/java/com/android/ai/catalog/ui/CatalogApp.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.catalog.ui

import android.content.Intent
import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.ElevatedCard
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.net.toUri
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.android.ai.catalog.R
import com.android.ai.catalog.ui.domain.SampleCatalogItem
import com.android.ai.catalog.ui.domain.sampleCatalog
import com.google.firebase.FirebaseApp
import kotlinx.serialization.Serializable

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CatalogApp(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val navController = rememberNavController()

    var isDialogOpened by remember { mutableStateOf(false) }

    NavHost(
        navController = navController,
        startDestination = HomeScreen,
    ) {
        composable<HomeScreen> {
            Scaffold(
                topBar = {
                    TopAppBar(
                        colors = TopAppBarDefaults.topAppBarColors(
                            containerColor = MaterialTheme.colorScheme.primaryContainer,
                            titleContentColor = MaterialTheme.colorScheme.primary,
                        ),
                        title = {
                            Text(text = stringResource(id = R.string.top_bar_title))
                        },
                    )
                },
            ) { innerPadding ->
                LazyColumn(
                    contentPadding = innerPadding,
                ) {
                    items(sampleCatalog) {
                        CatalogListItem(catalogItem = it) {
                            if (it.needsFirebase && !isFirebaseInitialized()) {
                                isDialogOpened = true
                            } else {
                                navController.navigate(it.route)
                            }
                        }
                    }
                }
            }
        }

        sampleCatalog.forEach {
            val catalogItem = it
            composable(catalogItem.route) {
                catalogItem.sampleEntryScreen()
            }
        }
    }

    if (isDialogOpened) {
        FirebaseRequiredAlert(
            onDismiss = { isDialogOpened = false },
            onOpenFirebaseDocClick = {
                isDialogOpened = false
                val intent = Intent(
                    Intent.ACTION_VIEW,
                    "https://firebase.google.com/docs/vertex-ai/get-started#no-existing-firebase".toUri(),
                )
                context.startActivity(intent)
            },
        )
    }
}

@Composable
fun CatalogListItem(catalogItem: SampleCatalogItem, onButtonClick: () -> Unit) {
    val context = LocalContext.current
    ElevatedCard(
        modifier = Modifier.padding(18.dp),
        onClick = {
            onButtonClick()
        },
    ) {
        Column(
            Modifier.padding(15.dp),
        ) {
            Text(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp),
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                text = context.getString(catalogItem.title),
            )
            Text(
                modifier = Modifier.padding(bottom = 8.dp),
                text = context.getString(catalogItem.description),
            )
            Row {
                Spacer(Modifier.weight(1f))
                catalogItem.tags.forEach {
                    Spacer(Modifier.width(8.dp))
                    Box(
                        modifier = Modifier
                            .background(
                                color = it.backgroundColor,
                                shape = RoundedCornerShape(
                                    8.dp,
                                ),
                            )
                            .padding(start = 4.dp, end = 4.dp),
                    ) {
                        Text(
                            fontSize = 9.sp,
                            text = it.label,
                            color = it.textColor,
                        )
                    }
                }
            }
        }
    }
}

@Serializable
object HomeScreen

@Composable
fun FirebaseRequiredAlert(onDismiss: () -> Unit = {}, onOpenFirebaseDocClick: () -> Unit = {}) {
    AlertDialog(
        onDismissRequest = {
            onDismiss()
        },
        title = {
            Text(text = stringResource(R.string.firebase_required))
        },
        text = {
            Text(stringResource(R.string.firebase_required_description))
        },
        dismissButton = {
            TextButton(
                onClick = {
                    onDismiss()
                },
            ) {
                Text(stringResource(R.string.close))
            }
        },
        confirmButton = {
            TextButton(
                onClick = {
                    onOpenFirebaseDocClick()
                },
            ) {
                Text(stringResource(R.string.firebase_doc_button))
            }
        },
    )
}

fun isFirebaseInitialized(): Boolean {
    return try {
        val firebaseApp = FirebaseApp.getInstance()
        return firebaseApp.options.projectId != "mock_project"
    } catch (e: IllegalStateException) {
        Log.e("CatalogScreen", "Firebase is not initialized")
        return false
    }
}


--- END OF FILE app/src/main/java/com/android/ai/catalog/ui/CatalogApp.kt ---


--- START OF FILE app/src/main/java/com/android/ai/catalog/ui/domain/SampleCatalog.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.catalog.ui.domain

import androidx.annotation.StringRes
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import com.android.ai.catalog.R
import com.android.ai.samples.geminichatbot.GeminiChatbotScreen
import com.android.ai.samples.geminilivetodo.ui.TodoScreen
import com.android.ai.samples.geminimultimodal.ui.GeminiMultimodalScreen
import com.android.ai.samples.geminivideosummary.VideoSummarizationScreen
import com.android.ai.samples.genai_image_description.GenAIImageDescriptionScreen
import com.android.ai.samples.genai_summarization.GenAISummarizationScreen
import com.android.ai.samples.genai_writing_assistance.GenAIWritingAssistanceScreen
import com.android.ai.samples.imagen.ui.ImagenScreen
import com.android.ai.samples.magicselfie.ui.MagicSelfieScreen

@androidx.annotation.RequiresPermission(android.Manifest.permission.RECORD_AUDIO)
val sampleCatalog = listOf(
    SampleCatalogItem(
        title = R.string.gemini_multimodal_sample_title,
        description = R.string.gemini_multimodal_sample_description,
        route = "GeminiMultimodalScreen",
        sampleEntryScreen = { GeminiMultimodalScreen() },
        tags = listOf(SampleTags.GEMINI_2_0_FLASH, SampleTags.FIREBASE),
        needsFirebase = true,
    ),
    SampleCatalogItem(
        title = R.string.gemini_chatbot_sample_title,
        description = R.string.gemini_chatbot_sample_description,
        route = "GeminiChitchatScreen",
        sampleEntryScreen = { GeminiChatbotScreen() },
        tags = listOf(SampleTags.GEMINI_2_0_FLASH, SampleTags.FIREBASE),
        needsFirebase = true,
    ),
    SampleCatalogItem(
        title = R.string.genai_summarization_sample_title,
        description = R.string.genai_summarization_sample_description,
        route = "GenAISummarizationScreen",
        sampleEntryScreen = { GenAISummarizationScreen() },
        tags = listOf(SampleTags.GEMINI_NANO, SampleTags.ML_KIT),
    ),
    SampleCatalogItem(
        title = R.string.genai_image_description_sample_title,
        description = R.string.genai_image_description_sample_description,
        route = "GenAIImageDescriptionScreen",
        sampleEntryScreen = { GenAIImageDescriptionScreen() },
        tags = listOf(SampleTags.GEMINI_NANO, SampleTags.ML_KIT),
    ),
    SampleCatalogItem(
        title = R.string.genai_writing_assistance_sample_title,
        description = R.string.genai_writing_assistance_sample_description,
        route = "GenAIWritingAssistanceScreen",
        sampleEntryScreen = { GenAIWritingAssistanceScreen() },
        tags = listOf(SampleTags.GEMINI_NANO, SampleTags.ML_KIT),
    ),
    SampleCatalogItem(
        title = R.string.imagen_sample_title,
        description = R.string.imagen_sample_description,
        route = "ImagenImageGenerationScreen",
        sampleEntryScreen = { ImagenScreen() },
        tags = listOf(SampleTags.IMAGEN, SampleTags.FIREBASE),
        needsFirebase = true,
    ),
    SampleCatalogItem(
        title = R.string.magic_selfie_sample_title,
        description = R.string.magic_selfie_sample_description,
        route = "MagicSelfieScreen",
        sampleEntryScreen = { MagicSelfieScreen() },
        tags = listOf(SampleTags.IMAGEN, SampleTags.FIREBASE, SampleTags.ML_KIT),
        needsFirebase = true,
    ),
    SampleCatalogItem(
        title = R.string.gemini_video_summarization_sample_title,
        description = R.string.gemini_video_summarization_sample_description,
        route = "VideoSummarizationScreen",
        sampleEntryScreen = { VideoSummarizationScreen() },
        tags = listOf(SampleTags.GEMINI_2_0_FLASH, SampleTags.FIREBASE, SampleTags.MEDIA3),
        needsFirebase = true,
    ),
    SampleCatalogItem(
        title = R.string.gemini_live_todo_title,
        description = R.string.gemini_live_todo_description,
        route = "GeminiLiveTodoScreen",
        sampleEntryScreen = { TodoScreen() },
        tags = listOf(SampleTags.GEMINI_2_0_FLASH, SampleTags.FIREBASE),
        needsFirebase = true,
    ),

    // To create a new sample entry, add a new SampleCatalogItem here.
)

data class SampleCatalogItem(
    @StringRes val title: Int,
    @StringRes val description: Int,
    val route: String,
    val sampleEntryScreen: @Composable () -> Unit,
    val tags: List<SampleTags> = emptyList(),
    val needsFirebase: Boolean = false,
)

enum class SampleTags(
    val label: String,
    val backgroundColor: Color,
    val textColor: Color,
) {
    FIREBASE("Firebase", Color(0xFFFF9100), Color.White),
    GEMINI_2_0_FLASH("Gemini 2.0 Flash", Color(0xFF4285F4), Color.White),
    GEMINI_NANO("Gemini Nano", Color(0xFF7abafe), Color.White),
    IMAGEN("Imagen", Color(0xFF7CB342), Color.White),
    MEDIA3("Media3", Color(0xFF7CB584), Color.White),
    ML_KIT("ML Kit", Color.White, Color(0xFF4285F4)),
}


--- END OF FILE app/src/main/java/com/android/ai/catalog/ui/domain/SampleCatalog.kt ---


--- START OF FILE app/src/main/java/com/android/ai/catalog/ui/theme/Color.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.catalog.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)


--- END OF FILE app/src/main/java/com/android/ai/catalog/ui/theme/Color.kt ---


--- START OF FILE app/src/main/java/com/android/ai/catalog/ui/theme/Theme.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.catalog.ui.theme

import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80,
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40,
)

@Composable
fun AISampleCatalogTheme(darkTheme: Boolean = isSystemInDarkTheme(), dynamicColor: Boolean = true, content: @Composable () -> Unit) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content,
    )
}


--- END OF FILE app/src/main/java/com/android/ai/catalog/ui/theme/Theme.kt ---


--- START OF FILE app/src/main/java/com/android/ai/catalog/ui/theme/Type.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.catalog.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp,
    ),
)


--- END OF FILE app/src/main/java/com/android/ai/catalog/ui/theme/Type.kt ---


--- START OF FILE app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml ---

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

--- END OF FILE app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml ---


--- START OF FILE app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml ---

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

--- END OF FILE app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml ---


--- START OF FILE app/src/main/res/values/strings.xml ---

<resources>
    <string name="app_name">AI Sample Catalog</string>
    <string name="gemini_multimodal_sample_title">Gemini Multimodal Generation</string>
    <string name="gemini_multimodal_sample_description">A very simple example of multimodal generation using the Gemini 2.0 Flash model.</string>
    <string name="gemini_chatbot_sample_title">Gemini Chatbot</string>
    <string name="gemini_chatbot_sample_description">A simple implementation of chatbot using Gemini 2.0 Flash model.</string>
    <string name="genai_summarization_sample_title">Summarization with Gemini Nano</string>
    <string name="genai_summarization_sample_description">Summarize articles and conversations on-device with GenAI API powered by Gemini Nano</string>
    <string name="genai_image_description_sample_title">Image Description with Gemini Nano</string>
    <string name="genai_image_description_sample_description">Generate short descriptions of images on-device with GenAI API powered by Gemini Nano</string>
    <string name="genai_writing_assistance_sample_title">Polish text with Gemini Nano</string>
    <string name="genai_writing_assistance_sample_description">Proofread and rewrite short content on-device with GenAI API powered by Gemini Nano</string>"
    <string name="top_bar_title">Android AI Samples</string>
    <string name="open_sample_button">Open sample</string>
    <string name="imagen_sample_title">Image generation with Imagen</string>
    <string name="imagen_sample_description">Generate images with Imagen, Google image generation model</string>
    <string name="magic_selfie_sample_title">Magic Selfie with Imagen and ML Kit</string>
    <string name="magic_selfie_sample_description">Change the background of your selfies with Imagen and the ML Kit Segmentation API</string>
    <string name="gemini_video_summarization_sample_title">Video Summarization with Gemini and Firebase</string>
    <string name="gemini_video_summarization_sample_description">"Generate a summary of a video (from a cloud URL or Youtube) with Gemini API powered by Firebase"</string>
    <string name="gemini_live_todo_title">Gemini Live Todo</string>
    <string name="gemini_live_todo_description">"Simple Todo app using the Gemini Live API to interact with the items in the list"</string>
    <string name="firebase_required">Firebase Required</string>
    <string name="firebase_required_description">This feature requires Firebase to be initialized.</string>
    <string name="close">Close</string>
    <string name="firebase_doc_button">Show me how</string>
</resources>

--- END OF FILE app/src/main/res/values/strings.xml ---


--- START OF FILE app/src/main/res/values/themes.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.AISampleCatalog" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

--- END OF FILE app/src/main/res/values/themes.xml ---


--- START OF FILE app/src/main/res/xml/backup_rules.xml ---

<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

--- END OF FILE app/src/main/res/xml/backup_rules.xml ---


--- START OF FILE app/src/main/res/xml/data_extraction_rules.xml ---

<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

--- END OF FILE app/src/main/res/xml/data_extraction_rules.xml ---


--- START OF FILE app/src/main/res/xml/provider_paths.xml ---

<?xml version="1.0" encoding="utf-8"?>
<paths>
    <cache-path name="external_files" path="."/>
</paths>

--- END OF FILE app/src/main/res/xml/provider_paths.xml ---


--- START OF FILE build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.jetbrains.kotlin.android) apply false
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.google.gms.google.services) apply false
    alias(libs.plugins.hilt.plugin) apply false
    alias(libs.plugins.ksp) apply false
    alias(libs.plugins.compose.compiler) apply false
    alias(libs.plugins.spotless) apply false
}

subprojects {
    apply(plugin = "com.diffplug.spotless")
    configure<com.diffplug.gradle.spotless.SpotlessExtension> {
        kotlin {
            target("**/*.kt")
            targetExclude("${layout.buildDirectory}/**/*.kt")
            ktlint()
            licenseHeaderFile(rootProject.file("spotless/copyright.kt"))
        }
        kotlinGradle {
            target("*.gradle.kts")
            targetExclude("${layout.buildDirectory}/**/*.kt")
            ktlint()
            // Look for the first line that doesn't have a block comment (assumed to be the license)
            licenseHeaderFile(rootProject.file("spotless/copyright.kt"), "(^(?![\\/ ]\\*).*$)")
        }
    }
}

--- END OF FILE build.gradle.kts ---


--- START OF FILE samples/gemini-chatbot/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.android.ai.samples.geminichatbot"
    compileSdk = 35

    buildFeatures {
        compose = true
    }

    defaultConfig {
        minSdk = 24

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.material.icons.extended)
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.ai)
    implementation(libs.hilt.android)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.runtime.livedata)
    implementation(libs.androidx.lifecycle.runtime.compose)
    implementation(libs.androidx.material3.android)
    ksp(libs.hilt.compiler)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}


--- END OF FILE samples/gemini-chatbot/build.gradle.kts ---


--- START OF FILE samples/gemini-chatbot/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--- END OF FILE samples/gemini-chatbot/proguard-rules.pro ---


--- START OF FILE samples/gemini-chatbot/src/main/java/com/android/ai/samples/geminichatbot/ChatMessage.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminichatbot

import android.net.Uri

data class ChatMessage(
    val text: String,
    val timestamp: Long,
    val isIncoming: Boolean = false,
    val senderIconUrl: Uri? = null,
)


--- END OF FILE samples/gemini-chatbot/src/main/java/com/android/ai/samples/geminichatbot/ChatMessage.kt ---


--- START OF FILE samples/gemini-chatbot/src/main/java/com/android/ai/samples/geminichatbot/GeminiChatbotScreen.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminichatbot

import android.content.Intent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.imePadding
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.widthIn
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.material3.TopAppBarDefaults.topAppBarColors
import androidx.compose.material3.rememberTopAppBarState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.net.toUri
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GeminiChatbotScreen(viewModel: GeminiChatbotViewModel = hiltViewModel()) {
    val topAppBarState = rememberTopAppBarState()
    val scrollBehavior = TopAppBarDefaults.pinnedScrollBehavior(topAppBarState)
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    var message by rememberSaveable { mutableStateOf("") }

    Scaffold(
        modifier = Modifier
            .fillMaxSize()
            .nestedScroll(scrollBehavior.nestedScrollConnection)
            .imePadding(),
        topBar = {
            TopAppBar(
                colors = topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                ),
                title = {
                    Text(text = stringResource(id = R.string.geminichatbot_title_bar))
                },
                actions = {
                    SeeCodeButton()
                },
            )
        },
    ) { innerPadding ->
        Column {
            MessageList(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
                    .weight(1f),
                messages = uiState.messages,
                contentPadding = innerPadding,
            )

            when (val state = uiState.geminiMessageState) {
                is GeminiMessageState.Generating -> {
                    CircularProgressIndicator(
                        modifier = Modifier
                            .padding(vertical = 8.dp)
                            .align(Alignment.CenterHorizontally),
                    )
                }

                is GeminiMessageState.Error -> {
                    AlertDialog(
                        onDismissRequest = { viewModel.dismissError() },
                        title = { Text(text = stringResource(R.string.error)) },
                        text = { Text(text = state.errorMessage) },
                        confirmButton = {
                            Button(onClick = { viewModel.dismissError() }) {
                                Text(text = stringResource(R.string.dismiss_button))
                            }
                        },
                    )
                }
                else -> { /* No additional UI for waiting state */ }
            }

            InputBar(
                value = message,
                placeholder = stringResource(R.string.geminichatbot_input_placeholder),
                onInputChanged = {
                    message = it
                },
                onSendClick = {
                    viewModel.sendMessage(message)
                    message = ""
                },
                sendEnabled = uiState.geminiMessageState !is GeminiMessageState.Generating,
            )
        }
    }
}

@Composable
fun MessageList(messages: List<ChatMessage>, contentPadding: PaddingValues, modifier: Modifier = Modifier) {
    LazyColumn(
        modifier = modifier,
        contentPadding = contentPadding,
        reverseLayout = true,
        verticalArrangement = Arrangement.spacedBy(8.dp, Alignment.Bottom),
    ) {
        items(items = messages) { message ->
            MessageBubble(
                message = message,
            )
        }
    }
}

@Composable
fun MessageBubble(message: ChatMessage, modifier: Modifier = Modifier) {
    Box(
        modifier = modifier.fillMaxWidth(),
        contentAlignment = if (message.isIncoming) Alignment.CenterStart else Alignment.CenterEnd,
    ) {
        Surface(
            modifier = Modifier.widthIn(max = 300.dp),
            color = if (message.isIncoming) {
                MaterialTheme.colorScheme.secondaryContainer
            } else {
                MaterialTheme.colorScheme.primary
            },
            shape = MaterialTheme.shapes.large,
        ) {
            Text(
                modifier = Modifier.padding(16.dp),
                text = message.text,
            )
        }
    }
}

@Composable
fun SeeCodeButton() {
    val context = LocalContext.current
    val githubLink = "https://github.com/android/ai-samples/tree/main/ai-catalog/samples/gemini-chatbot"

    Button(
        onClick = {
            val intent = Intent(Intent.ACTION_VIEW, githubLink.toUri())
            context.startActivity(intent)
        },
        modifier = Modifier.padding(end = 8.dp),
    ) {
        Icon(Icons.Filled.Code, contentDescription = "See code")
        Text(
            modifier = Modifier.padding(start = 8.dp),
            fontSize = 12.sp,
            text = stringResource(R.string.see_code),
        )
    }
}


--- END OF FILE samples/gemini-chatbot/src/main/java/com/android/ai/samples/geminichatbot/GeminiChatbotScreen.kt ---


--- START OF FILE samples/gemini-chatbot/src/main/java/com/android/ai/samples/geminichatbot/GeminiChatbotViewModel.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminichatbot

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.Firebase
import com.google.firebase.ai.ai
import com.google.firebase.ai.type.GenerativeBackend
import com.google.firebase.ai.type.HarmBlockThreshold
import com.google.firebase.ai.type.HarmCategory
import com.google.firebase.ai.type.SafetySetting
import com.google.firebase.ai.type.content
import com.google.firebase.ai.type.generationConfig
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch

sealed interface GeminiMessageState {
    data object WaitingForMessage : GeminiMessageState
    data object Generating : GeminiMessageState
    data class Error(val errorMessage: String) : GeminiMessageState
}

data class GeminiChatbotUiState(
    val messages: List<ChatMessage> = listOf(),
    val geminiMessageState: GeminiMessageState = GeminiMessageState.WaitingForMessage,
)

class GeminiChatbotViewModel @Inject constructor() : ViewModel() {
    private val _uiState = MutableStateFlow(GeminiChatbotUiState())
    val uiState: StateFlow<GeminiChatbotUiState> = _uiState.asStateFlow()

    private val generativeModel by lazy {
        Firebase.ai(backend = GenerativeBackend.googleAI()).generativeModel(
            "gemini-2.0-flash",
            generationConfig = generationConfig {
                temperature = 0.9f
                topK = 32
                topP = 1f
                maxOutputTokens = 4096
            },
            safetySettings = listOf(
                SafetySetting(HarmCategory.HARASSMENT, HarmBlockThreshold.MEDIUM_AND_ABOVE),
                SafetySetting(HarmCategory.HATE_SPEECH, HarmBlockThreshold.MEDIUM_AND_ABOVE),
                SafetySetting(HarmCategory.SEXUALLY_EXPLICIT, HarmBlockThreshold.MEDIUM_AND_ABOVE),
                SafetySetting(HarmCategory.DANGEROUS_CONTENT, HarmBlockThreshold.MEDIUM_AND_ABOVE),
            ),
            systemInstruction = content {
                text("""You are a friendly assistant. Keep your response short.""")
            },
        )
    }

    private val chat = generativeModel.startChat()

    fun sendMessage(message: String) {
        viewModelScope.launch {
            try {
                val userMessage = ChatMessage(
                    text = message,
                    timestamp = System.currentTimeMillis(),
                )
                _uiState.update {
                    it.copy(
                        messages = listOf(userMessage) + it.messages,
                        geminiMessageState = GeminiMessageState.Generating,
                    )
                }

                val response = chat.sendMessage(message)
                val newMessage = response.text?.let {
                    ChatMessage(
                        text = it.trim(),
                        timestamp = System.currentTimeMillis(),
                        isIncoming = true,
                    )
                } ?: error("Model returned an empty response") // This error will be caught by the try/catch

                _uiState.update {
                    it.copy(messages = listOf(newMessage) + it.messages, geminiMessageState = GeminiMessageState.WaitingForMessage)
                }
            } catch (e: Exception) {
                _uiState.update {
                    it.copy(geminiMessageState = GeminiMessageState.Error(e.localizedMessage ?: "Something went wrong, try again"))
                }
            }
        }
    }

    fun dismissError() {
        _uiState.update {
            it.copy(geminiMessageState = GeminiMessageState.WaitingForMessage)
        }
    }
}


--- END OF FILE samples/gemini-chatbot/src/main/java/com/android/ai/samples/geminichatbot/GeminiChatbotViewModel.kt ---


--- START OF FILE samples/gemini-chatbot/src/main/java/com/android/ai/samples/geminichatbot/InputBar.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminichatbot

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.defaultMinSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.Send
import androidx.compose.material3.FilledIconButton
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardCapitalization
import androidx.compose.ui.unit.dp

@Composable
internal fun InputBar(
    value: String,
    placeholder: String,
    sendEnabled: Boolean,
    onInputChanged: (String) -> Unit,
    onSendClick: () -> Unit,
    modifier: Modifier = Modifier,
) {
    Surface(
        modifier = modifier,
        tonalElevation = 3.dp,
    ) {
        Row(
            modifier = Modifier
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(4.dp),
        ) {
            TextField(
                value = value,
                onValueChange = onInputChanged,
                modifier = Modifier
                    .weight(1f)
                    .defaultMinSize(minHeight = 56.dp)
                    .wrapContentHeight(),
                keyboardOptions = KeyboardOptions(
                    capitalization = KeyboardCapitalization.Sentences,
                    imeAction = ImeAction.Send,
                ),
                keyboardActions = KeyboardActions(onSend = { onSendClick() }),
                placeholder = { Text(placeholder) },
                shape = MaterialTheme.shapes.extraLarge,
                colors = TextFieldDefaults.colors(
                    focusedContainerColor = MaterialTheme.colorScheme.background,
                    unfocusedContainerColor = MaterialTheme.colorScheme.background,
                    focusedIndicatorColor = Color.Transparent,
                    unfocusedIndicatorColor = Color.Transparent,
                    disabledIndicatorColor = Color.Transparent,
                ),
            )
            Spacer(modifier = Modifier.width(4.dp))
            FilledIconButton(
                onClick = onSendClick,
                modifier = Modifier.size(56.dp),
                enabled = sendEnabled,
            ) {
                Icon(
                    imageVector = Icons.AutoMirrored.Filled.Send,
                    contentDescription = stringResource(R.string.send),
                )
            }
        }
    }
}


--- END OF FILE samples/gemini-chatbot/src/main/java/com/android/ai/samples/geminichatbot/InputBar.kt ---


--- START OF FILE samples/gemini-chatbot/src/main/res/values/strings.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="geminichatbot_title_bar">Gemini Chatbot</string>
    <string name="geminichatbot_input_placeholder">Type your message</string>
    <string name="see_code">See code</string>
    <string name="dismiss_button">Dismiss</string>
    <string name="error">Error</string>
    <string name="send">Send</string>
</resources>

--- END OF FILE samples/gemini-chatbot/src/main/res/values/strings.xml ---


--- START OF FILE samples/gemini-live-todo/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.android.ai.samples.geminilivetodo"
    compileSdk = 35

    defaultConfig {
        minSdk = 24

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.material.icons.extended)
    implementation(platform(libs.firebase.bom))
    implementation(libs.google.firebase.ai)
    implementation(libs.androidx.lifecycle.viewmodel.android)
    implementation(libs.material3)
    implementation(libs.hilt.android)
    ksp(libs.hilt.compiler)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.material3.android)
    implementation(libs.kotlinx.serialization.json)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}


--- END OF FILE samples/gemini-live-todo/build.gradle.kts ---


--- START OF FILE samples/gemini-live-todo/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--- END OF FILE samples/gemini-live-todo/proguard-rules.pro ---


--- START OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/data/Todo.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminilivetodo.data

import java.util.UUID.randomUUID

data class Todo(
    val id: Long = randomUUID().mostSignificantBits,
    val task: String,
    val isCompleted: Boolean = false,
)


--- END OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/data/Todo.kt ---


--- START OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/data/TodoRepository.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminilivetodo.data

import javax.inject.Inject
import javax.inject.Singleton
import kotlin.collections.filterNot
import kotlin.collections.map
import kotlin.collections.plus
import kotlin.text.isNotBlank
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update

@Singleton
class TodoRepository @Inject constructor() {

    private val _todos = MutableStateFlow<List<Todo>>(
        listOf(
            Todo(1234, "buy bread", false),
            Todo(1235, "do the dishes", false),
            Todo(1236, "buy eggs", false),
            Todo(1237, "read a book", false),
        ),
    )
    val todos: Flow<List<Todo>> = _todos.asStateFlow()

    fun getTodoList(): List<Todo> = _todos.value

    fun addTodo(taskDescription: String) {
        if (taskDescription.isNotBlank()) {
            val newTodo = Todo(task = taskDescription)
            _todos.update { currentList ->
                currentList + newTodo
            }
        }
    }

    fun removeTodo(todoId: Long) {
        _todos.update { currentList ->
            currentList.filterNot { it.id == todoId }
        }
    }

    fun toggleTodoStatus(todoId: Long) {
        _todos.update { currentList ->
            currentList.map { todo ->
                if (todo.id == todoId) {
                    todo.copy(isCompleted = !todo.isCompleted)
                } else {
                    todo
                }
            }
        }
    }
}


--- END OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/data/TodoRepository.kt ---


--- START OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/ui/TodoScreen.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminilivetodo.ui

import android.app.Activity
import android.content.Intent
import androidx.activity.compose.LocalActivity
import androidx.compose.animation.Animatable
import androidx.compose.animation.animateColor
import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.imePadding
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Mic
import androidx.compose.material.icons.filled.MicNone
import androidx.compose.material.icons.filled.MicOff
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FabPosition
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.net.toUri
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.android.ai.samples.geminilivetodo.R
import com.android.ai.samples.geminilivetodo.data.Todo
import kotlin.collections.reversed

/**
 * The main screen for the To-do list application.
 * This composable is stateful, connecting to the ViewModel to manage UI state and events.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TodoScreen(viewModel: TodoScreenViewModel = hiltViewModel()) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    var text by remember { mutableStateOf("") }

    val activity = LocalActivity.current as Activity

    LaunchedEffect(Unit) {
        viewModel.initializeGeminiLive(activity)
    }

    Scaffold(
        topBar = {
            TopAppBar(
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                ),
                title = { Text(stringResource(R.string.gemini_live_title)) },
                actions = {
                    SeeCodeButton()
                },
            )
        },
        floatingActionButton = {
            MicButton(
                uiState = uiState,
                onToggle = { viewModel.toggleLiveSession(activity) },
            )
        },
        floatingActionButtonPosition = FabPosition.Center,
        modifier = Modifier.fillMaxSize(),
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .padding(16.dp)
                .imePadding()
                .fillMaxSize(),
        ) {
            TodoInput(
                text = text,
                onTextChange = { text = it },
                onAddClick = {
                    viewModel.addTodo(text)
                    text = ""
                },
            )

            when (uiState) {
                is TodoScreenUiState.Initial -> {
                    Box(
                        modifier = Modifier
                            .fillMaxSize(),
                        contentAlignment = Alignment.Center,
                    ) {
                        CircularProgressIndicator()
                    }
                }
                is TodoScreenUiState.Success -> {
                    val todos = (uiState as TodoScreenUiState.Success).todos
                    LazyColumn(modifier = Modifier.fillMaxSize()) {
                        itemsIndexed(todos.reversed(), key = { index: Int, item: Todo -> item.id }) { index, todo ->
                            TodoItem(
                                modifier = Modifier,
                                task = todo,
                                onToggle = { viewModel.toggleTodoStatus(todo.id) },
                                onDelete = { viewModel.removeTodo(todo.id) },
                            )
                            if (index != todos.size - 1) {
                                HorizontalDivider()
                            }
                        }
                    }
                }
                is TodoScreenUiState.Error -> {
                    val todos = (uiState as TodoScreenUiState.Error).todos
                    LazyColumn(modifier = Modifier.fillMaxSize()) {
                        itemsIndexed(todos.reversed(), key = { index: Int, item: Todo -> item.id }) { index, todo ->
                            TodoItem(
                                modifier = Modifier,
                                task = todo,
                                onToggle = { viewModel.toggleTodoStatus(todo.id) },
                                onDelete = { viewModel.removeTodo(todo.id) },
                            )
                            if (index != todos.size - 1) {
                                HorizontalDivider()
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun TodoInput(text: String, onTextChange: (String) -> Unit, onAddClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 16.dp),
        verticalAlignment = Alignment.CenterVertically,
    ) {
        OutlinedTextField(
            value = text,
            onValueChange = onTextChange,
            label = { Text(stringResource(R.string.new_task_placeholder)) },
            modifier = Modifier.weight(1f),
            singleLine = true,
        )
        Spacer(modifier = Modifier.width(8.dp))
        Button(
            enabled = text.isNotBlank(),
            onClick = onAddClick,
        ) {
            Text(stringResource(R.string.add_button))
        }
    }
}

@Composable
fun MicButton(uiState: TodoScreenUiState, onToggle: () -> Unit) {
    if (uiState is TodoScreenUiState.Success) {
        val micIcon = when {
            uiState.liveSessionState is LiveSessionState.Ready -> Icons.Filled.MicOff
            uiState.liveSessionState is LiveSessionState.Running -> Icons.Filled.Mic
            uiState.liveSessionState is LiveSessionState.NotReady -> Icons.Filled.MicNone
            uiState.liveSessionState is LiveSessionState.Error -> Icons.Filled.MicNone
            else -> Icons.Filled.MicNone
        }

        val containerColor = if (uiState.liveSessionState is LiveSessionState.Running) {
            val infiniteTransition =
                rememberInfiniteTransition(label = "mic_color_transition")
            infiniteTransition.animateColor(
                initialValue = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),
                targetValue = MaterialTheme.colorScheme.primary.copy(alpha = 0.9f),
                animationSpec = infiniteRepeatable(
                    animation = tween(1000, easing = LinearEasing),
                    repeatMode = RepeatMode.Reverse,
                ),
                label = "mic_color",
            ).value
        } else {
            MaterialTheme.colorScheme.primaryContainer
        }

        FloatingActionButton(
            onClick = { if (uiState.liveSessionState !is LiveSessionState.NotReady) onToggle() },
            containerColor = containerColor,
        ) {
            Icon(micIcon, stringResource(R.string.interact_with_todolist_by_voice))
        }
    } else if (uiState is TodoScreenUiState.Error) {
        val isDialogDisplayed = remember { mutableStateOf(true) }
        if (isDialogDisplayed.value) {
            AlertDialog(
                onDismissRequest = { isDialogDisplayed.value = false },
                title = { Text(text = stringResource(R.string.error_title)) },
                text = { Text(text = stringResource(R.string.error_message)) },
                confirmButton = {
                    Button(onClick = { isDialogDisplayed.value = false }) {
                        Text(text = stringResource(R.string.dismiss_button))
                    }
                },
            )
        }
    }
}

@Composable
fun TodoItem(modifier: Modifier, task: Todo, onToggle: () -> Unit, onDelete: () -> Unit) {
    val defaultBackgroundColor = Color.Transparent
    val backgroundColor = remember { Animatable(defaultBackgroundColor) }

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 12.dp, horizontal = 8.dp)
            .background(backgroundColor.value),
        verticalAlignment = Alignment.CenterVertically,
    ) {
        Checkbox(
            checked = task.isCompleted,
            onCheckedChange = { onToggle() },
        )
        Text(
            text = task.task,
            style = if (task.isCompleted) {
                TextStyle(fontSize = 16.sp, textDecoration = TextDecoration.LineThrough)
            } else {
                TextStyle(fontSize = 16.sp, textDecoration = TextDecoration.None)
            },
            modifier = Modifier.weight(1f),
        )
        IconButton(onClick = onDelete) {
            Icon(
                imageVector = Icons.Default.Delete,
                contentDescription = "Delete",
            )
        }
    }
}

@Composable
fun SeeCodeButton() {
    val context = LocalContext.current
    val githubLink = "https://github.com/android/ai-samples/tree/main/ai-catalog/samples/gemini-live-todo"

    Button(
        onClick = {
            val intent = Intent(Intent.ACTION_VIEW, githubLink.toUri())
            context.startActivity(intent)
        },
        modifier = Modifier.padding(end = 8.dp),
    ) {
        Icon(Icons.Filled.Code, contentDescription = "See code")
        Text(
            modifier = Modifier.padding(start = 8.dp),
            fontSize = 12.sp,
            text = stringResource(R.string.see_code),
        )
    }
}


--- END OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/ui/TodoScreen.kt ---


--- START OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/ui/TodoScreenUiState.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminilivetodo.ui

import com.android.ai.samples.geminilivetodo.data.Todo

sealed interface TodoScreenUiState {
    data object Initial : TodoScreenUiState

    data class Success(
        val todos: List<Todo> = emptyList(),
        val liveSessionState: LiveSessionState,
    ) : TodoScreenUiState

    data class Error(
        val todos: List<Todo> = emptyList(),
        val liveSessionState: LiveSessionState,
    ) : TodoScreenUiState
}

sealed interface LiveSessionState {
    data object NotReady : LiveSessionState
    data object Ready : LiveSessionState
    data object Running : LiveSessionState
    data object Error : LiveSessionState
}


--- END OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/ui/TodoScreenUiState.kt ---


--- START OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/ui/TodoScreenViewModel.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminilivetodo.ui

import android.Manifest
import android.annotation.SuppressLint
import android.app.Activity
import android.content.pm.PackageManager
import android.util.Log
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.ai.samples.geminilivetodo.data.TodoRepository
import com.google.firebase.Firebase
import com.google.firebase.ai.ai
import com.google.firebase.ai.type.FunctionCallPart
import com.google.firebase.ai.type.FunctionDeclaration
import com.google.firebase.ai.type.FunctionResponsePart
import com.google.firebase.ai.type.GenerativeBackend
import com.google.firebase.ai.type.LiveSession
import com.google.firebase.ai.type.PublicPreviewAPI
import com.google.firebase.ai.type.ResponseModality
import com.google.firebase.ai.type.Schema
import com.google.firebase.ai.type.SpeechConfig
import com.google.firebase.ai.type.Tool
import com.google.firebase.ai.type.Voice
import com.google.firebase.ai.type.content
import com.google.firebase.ai.type.liveGenerationConfig
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.jsonPrimitive
import kotlinx.serialization.json.long

@OptIn(PublicPreviewAPI::class)
@HiltViewModel
class TodoScreenViewModel @Inject constructor(private val todoRepository: TodoRepository) : ViewModel() {
    private val TAG = "TodoScreenViewModel"
    private var session: LiveSession? = null

    private val liveSessionState = MutableStateFlow<LiveSessionState>(LiveSessionState.NotReady)
    private val todos = todoRepository.todos

    val uiState: StateFlow<TodoScreenUiState> = combine(liveSessionState, todos) { liveSessionState, todos ->
        TodoScreenUiState.Success(todos, liveSessionState)
    }.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000L),
        initialValue = TodoScreenUiState.Initial,
    )

    fun addTodo(taskDescription: String) {
        todoRepository.addTodo(taskDescription)
    }

    fun removeTodo(todoId: Long) {
        todoRepository.removeTodo(todoId)
    }

    fun toggleTodoStatus(todoId: Long) {
        todoRepository.toggleTodoStatus(todoId)
    }

    @SuppressLint("MissingPermission")
    fun toggleLiveSession(activity: Activity) {
        viewModelScope.launch {
            if (liveSessionState.value is LiveSessionState.NotReady) return@launch

            session?.let {
                if (liveSessionState.value is LiveSessionState.Ready) {
                    if (ContextCompat.checkSelfPermission(
                            activity,
                            Manifest.permission.RECORD_AUDIO,
                        ) == PackageManager.PERMISSION_GRANTED
                    ) {
                        it.startAudioConversation(::handleFunctionCall)
                        liveSessionState.value = LiveSessionState.Running
                    }
                } else {
                    it.stopAudioConversation()
                    liveSessionState.value = LiveSessionState.Ready
                }
            }
        }
    }

    fun initializeGeminiLive(activity: Activity) {
        requestAudioPermissionIfNeeded(activity)
        viewModelScope.launch {
            Log.d(TAG, "Start Gemini Live initialization")
            val liveGenerationConfig = liveGenerationConfig {
                speechConfig = SpeechConfig(voice = Voice("FENRIR"))
                responseModality = ResponseModality.AUDIO
            }

            val systemInstruction = content {
                text(
                    """
                **Your Role:** You are a friendly and helpful voice assistant in this app. 
                Your main job is to change update the tasks in the todo list based on user requests.
    
                **Interaction Steps:**
                **Get the task id to remove or toggle a task:** If you need to remove or check/uncheck a task,
                    you'll need to retrieve the list of items in the list first to get the task id. Don't share 
                    the id with the user, just identify the id of the task mentioned and directly pass this id to the 
                    tool.
          
                **Never share the id with the user:** you don't need to share the id with the user. It is 
                    just here to help you perform the check/uncheck and remove operations to the list.
    
                **If Unsure:** If you can't determine the update from the request, politely ask the user to rephrase or try something else.
                    """.trimIndent(),
                )
            }

            val addTodo = FunctionDeclaration(
                "addTodo",
                "Add a task to the todo list",
                mapOf("taskDescription" to Schema.string("A succinct string describing the task")),
            )

            val removeTodo = FunctionDeclaration(
                "removeTodo",
                "Remove a task from the todo list",
                mapOf("todoId" to Schema.string("The id of the task to remove from the todo list")),
            )

            val toggleTodoStatus = FunctionDeclaration(
                "toggleTodoStatus",
                "Change the status of the task",
                mapOf("todoId" to Schema.string("The id of the task to remove from the todo list")),
            )

            val getTodoList = FunctionDeclaration(
                "getTodoList",
                "Get the list of all the tasks in the todo list",
                emptyMap(),
            )

            val generativeModel = Firebase.ai(backend = GenerativeBackend.vertexAI()).liveModel(
                "gemini-2.0-flash-live-preview-04-09",
                generationConfig = liveGenerationConfig,
                systemInstruction = systemInstruction,
                tools = listOf(
                    Tool.functionDeclarations(
                        listOf(getTodoList, addTodo, removeTodo, toggleTodoStatus),
                    ),
                ),
            )

            try {
                session = generativeModel.connect()
            } catch (e: Exception) {
                Log.e(TAG, "Error connecting to the model", e)
                liveSessionState.value = LiveSessionState.Error
            }

            liveSessionState.value = LiveSessionState.Ready
        }
    }

    private fun handleFunctionCall(functionCall: FunctionCallPart): FunctionResponsePart {
        return when (functionCall.name) {
            "getTodoList" -> {
                val todoList = todoRepository.getTodoList().reversed()
                val response = JsonObject(
                    mapOf(
                        "success" to JsonPrimitive(true),
                        "message" to JsonPrimitive("List of tasks in the todo list: $todoList"),
                    ),
                )
                FunctionResponsePart(functionCall.name, response)
            }
            "addTodo" -> {
                val taskDescription = functionCall.args["taskDescription"]!!.jsonPrimitive.content
                todoRepository.addTodo(taskDescription)
                val response = JsonObject(
                    mapOf(
                        "success" to JsonPrimitive(true),
                        "message" to JsonPrimitive("Task $taskDescription added to the todo list"),
                    ),
                )
                FunctionResponsePart(functionCall.name, response)
            }
            "removeTodo" -> {
                val taskId = functionCall.args["todoId"]!!.jsonPrimitive.long
                todoRepository.removeTodo(taskId)
                val response = JsonObject(
                    mapOf(
                        "success" to JsonPrimitive(true),
                        "message" to JsonPrimitive("Task was removed from the todo list"),
                    ),
                )
                FunctionResponsePart(functionCall.name, response)
            }
            "toggleTodoStatus" -> {
                val taskId = functionCall.args["todoId"]!!.jsonPrimitive.long
                todoRepository.toggleTodoStatus(taskId)
                val response = JsonObject(
                    mapOf(
                        "success" to JsonPrimitive(true),
                        "message" to JsonPrimitive("Task was toggled in the todo list"),
                    ),
                )
                FunctionResponsePart(functionCall.name, response)
            }
            else -> {
                val response = JsonObject(
                    mapOf("error" to JsonPrimitive("Unknown function: ${functionCall.name}")),
                )
                FunctionResponsePart(functionCall.name, response)
            }
        }
    }

    fun requestAudioPermissionIfNeeded(activity: Activity) {
        if (ContextCompat.checkSelfPermission(
                activity,
                Manifest.permission.RECORD_AUDIO,
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(activity, arrayOf(Manifest.permission.RECORD_AUDIO), 1)
        }
    }
}


--- END OF FILE samples/gemini-live-todo/src/main/java/com/android/ai/samples/geminilivetodo/ui/TodoScreenViewModel.kt ---


--- START OF FILE samples/gemini-live-todo/src/main/res/values/strings.xml ---

<?xml version="1.0" encoding="utf-8"?><!--
  ~ Copyright 2025 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
  -->

<resources>
    <string name="gemini_live_title">Gemini Live Todo</string>
    <string name="new_task_placeholder">New Task</string>
    <string name="add_button">Add</string>
    <string name="error_title">Error</string>
    <string name="error_message">The live session model could not be initialized.</string>
    <string name="dismiss_button">Dismiss</string>
    <string name="interact_with_todolist_by_voice">Button to start the live session and interact with the todo list by voice</string>
    <string name="see_code">See code</string>
</resources>

--- END OF FILE samples/gemini-live-todo/src/main/res/values/strings.xml ---


--- START OF FILE samples/gemini-multimodal/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.android.ai.samples.geminimultimodal"
    compileSdk = 35

    buildFeatures {
        compose = true
    }

    defaultConfig {
        minSdk = 24

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.15"
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.androidx.material.icons.extended)
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.ai)
    implementation(libs.hilt.android)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.runtime.livedata)
    ksp(libs.hilt.compiler)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}


--- END OF FILE samples/gemini-multimodal/build.gradle.kts ---


--- START OF FILE samples/gemini-multimodal/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--- END OF FILE samples/gemini-multimodal/proguard-rules.pro ---


--- START OF FILE samples/gemini-multimodal/src/main/java/com/android/ai/samples/geminimultimodal/data/GeminiDataSource.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminimultimodal.data

import android.graphics.Bitmap
import com.google.firebase.Firebase
import com.google.firebase.ai.ai
import com.google.firebase.ai.type.GenerativeBackend
import com.google.firebase.ai.type.HarmBlockThreshold
import com.google.firebase.ai.type.HarmCategory
import com.google.firebase.ai.type.SafetySetting
import com.google.firebase.ai.type.content
import com.google.firebase.ai.type.generationConfig
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class GeminiDataSource @Inject constructor() {
    private val generativeModel by lazy {
        Firebase.ai(backend = GenerativeBackend.googleAI()).generativeModel(
            "gemini-2.5-flash",
            generationConfig = generationConfig {
                temperature = 0.9f
                topK = 32
                topP = 1f
                maxOutputTokens = 4096
            },
            safetySettings = listOf(
                SafetySetting(HarmCategory.HARASSMENT, HarmBlockThreshold.MEDIUM_AND_ABOVE),
                SafetySetting(HarmCategory.HATE_SPEECH, HarmBlockThreshold.MEDIUM_AND_ABOVE),
                SafetySetting(HarmCategory.SEXUALLY_EXPLICIT, HarmBlockThreshold.MEDIUM_AND_ABOVE),
                SafetySetting(HarmCategory.DANGEROUS_CONTENT, HarmBlockThreshold.MEDIUM_AND_ABOVE),
            ),
        )
    }

    suspend fun generateText(bitmap: Bitmap, prompt: String): String {
        val multimodalPrompt = content {
            image(bitmap)
            text(prompt)
        }
        val result = generativeModel.generateContent(multimodalPrompt)
        return result.text ?: ""
    }
}


--- END OF FILE samples/gemini-multimodal/src/main/java/com/android/ai/samples/geminimultimodal/data/GeminiDataSource.kt ---


--- START OF FILE samples/gemini-multimodal/src/main/java/com/android/ai/samples/geminimultimodal/ui/GeminiMultimodalScreen.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminimultimodal.ui

import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.net.Uri
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts.TakePicturePreview
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.imePadding
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.CameraAlt
import androidx.compose.material.icons.filled.Code
import androidx.compose.material.icons.filled.SmartToy
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults.topAppBarColors
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.android.ai.samples.geminimultimodal.R

@OptIn(ExperimentalMaterial3Api::class)
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun GeminiMultimodalScreen(viewModel: GeminiMultimodalViewModel = hiltViewModel()) {
    val context = LocalContext.current
    var bitmap by remember { mutableStateOf<Bitmap?>(null) }
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()

    val promptPlaceHolder = stringResource(id = R.string.geminimultimodal_prompt_placeholder)
    var editTextValue by remember {
        mutableStateOf(promptPlaceHolder)
    }

    // Get the picture taken by the camera
    val cameraLauncher = rememberLauncherForActivityResult(TakePicturePreview()) { result ->
        result?.let {
            bitmap = it
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                colors = topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.primary,
                ),
                title = {
                    Text(text = stringResource(id = R.string.geminimultimodal_title_bar))
                },
                actions = {
                    SeeCodeButton(context)
                },
            )
        },
    ) { innerPadding ->
        Column(
            Modifier
                .padding(12.dp)
                .imePadding()
                .verticalScroll(rememberScrollState())
                .padding(innerPadding),
        ) {
            Card(
                modifier = Modifier
                    .size(
                        width = 450.dp,
                        height = 450.dp,
                    ),
            ) {
                val currentBitmap = bitmap
                if (currentBitmap != null) {
                    Image(
                        bitmap = currentBitmap.asImageBitmap(),
                        contentDescription = "Picture",
                        contentScale = ContentScale.Crop,
                        modifier = Modifier.fillMaxSize(),
                    )
                } else {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center,
                    ) {
                        Text(
                            text = stringResource(id = R.string.geminimultimodal_take_a_picture),
                            style = MaterialTheme.typography.bodySmall,
                        )
                    }
                }
            }
            Spacer(modifier = Modifier.height(6.dp))
            Row(horizontalArrangement = Arrangement.Center, modifier = Modifier.fillMaxWidth()) {
                Button(
                    onClick = {
                        cameraLauncher.launch(null)
                    },
                ) {
                    Icon(Icons.Default.CameraAlt, contentDescription = "Camera")
                }
            }
            Spacer(modifier = Modifier.height(24.dp))
            TextField(
                value = editTextValue,
                onValueChange = { editTextValue = it },
                label = { Text("Prompt") },
            )
            Spacer(modifier = Modifier.height(8.dp))
            Button(
                onClick = {
                    val currentBitmap = bitmap
                    if (currentBitmap != null) {
                        viewModel.generate(currentBitmap, editTextValue)
                    }
                },
                enabled = uiState !is GeminiMultimodalUiState.Loading && bitmap != null,
            ) {
                Icon(Icons.Default.SmartToy, contentDescription = "Robot")
                Text(modifier = Modifier.padding(start = 8.dp), text = "Generate")
            }
            Spacer(
                modifier = Modifier
                    .height(24.dp),
            )

            when (uiState) {
                is GeminiMultimodalUiState.Initial -> {
                    Text(
                        text = stringResource(id = R.string.geminimultimodal_generation_placeholder),
                        style = MaterialTheme.typography.bodySmall,
                    )
                }
                is GeminiMultimodalUiState.Loading -> {
                    CircularProgressIndicator()
                }
                is GeminiMultimodalUiState.Success -> {
                    Text(
                        text = (uiState as GeminiMultimodalUiState.Success).generatedText,
                    )
                }
                is GeminiMultimodalUiState.Error -> {
                    Text(
                        text = (uiState as GeminiMultimodalUiState.Error).errorMessage ?: stringResource(R.string.unknown_error),
                    )
                }
            }
        }
    }
}

@Composable
fun SeeCodeButton(context: Context) {
    val githubLink = "https://github.com/android/ai-samples/tree/main/ai-catalog/samples/gemini-multimodal"
    Button(
        onClick = {
            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(githubLink))
            context.startActivity(intent)
        },
        modifier = Modifier.padding(end = 8.dp),
    ) {
        Icon(Icons.Filled.Code, contentDescription = "See code")
        Text(
            modifier = Modifier.padding(start = 8.dp),
            fontSize = 12.sp,
            text = stringResource(R.string.see_code),
        )
    }
}


--- END OF FILE samples/gemini-multimodal/src/main/java/com/android/ai/samples/geminimultimodal/ui/GeminiMultimodalScreen.kt ---


--- START OF FILE samples/gemini-multimodal/src/main/java/com/android/ai/samples/geminimultimodal/ui/GeminiMultimodalUiState.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminimultimodal.ui

sealed interface GeminiMultimodalUiState {
    data object Initial : GeminiMultimodalUiState
    data object Loading : GeminiMultimodalUiState
    data class Success(val generatedText: String) : GeminiMultimodalUiState
    data class Error(val errorMessage: String?) : GeminiMultimodalUiState
}


--- END OF FILE samples/gemini-multimodal/src/main/java/com/android/ai/samples/geminimultimodal/ui/GeminiMultimodalUiState.kt ---


--- START OF FILE samples/gemini-multimodal/src/main/java/com/android/ai/samples/geminimultimodal/ui/GeminiMultimodalViewModel.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminimultimodal.ui

import android.graphics.Bitmap
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.ai.samples.geminimultimodal.data.GeminiDataSource
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

@HiltViewModel
class GeminiMultimodalViewModel @Inject constructor(private val geminiDataSource: GeminiDataSource) : ViewModel() {

    private val _uiState = MutableStateFlow<GeminiMultimodalUiState>(GeminiMultimodalUiState.Initial)
    val uiState: StateFlow<GeminiMultimodalUiState> = _uiState

    fun generate(bitmap: Bitmap, prompt: String) {
        _uiState.value = GeminiMultimodalUiState.Loading
        viewModelScope.launch {
            try {
                val result = geminiDataSource.generateText(bitmap, prompt)
                _uiState.value = GeminiMultimodalUiState.Success(result)
            } catch (e: Exception) {
                _uiState.value = GeminiMultimodalUiState.Error(e.message)
            }
        }
    }
}


--- END OF FILE samples/gemini-multimodal/src/main/java/com/android/ai/samples/geminimultimodal/ui/GeminiMultimodalViewModel.kt ---


--- START OF FILE samples/gemini-multimodal/src/main/res/values/strings.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="geminimultimodal_title_bar">Gemini Multimodal</string>
    <string name="geminimultimodal_prompt_placeholder">Describe this picture in a funny way with a lot of emojis</string>
    <string name="geminimultimodal_generation_placeholder">(Take a picture and enter a prompt to start generating.)</string>
    <string name="geminimultimodal_take_a_picture">(Take a picture.)</string>"
    <string name="geminimultimodal_generating">Generating&#8230;</string>
    <string name="see_code">See code</string>
    <string name="unknown_error">Unknown error</string>
</resources>

--- END OF FILE samples/gemini-multimodal/src/main/res/values/strings.xml ---


--- START OF FILE samples/gemini-video-summarization/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
    alias(libs.plugins.hilt.plugin)
}

android {
    namespace = "com.google.com.android.ai.samples.geminivideosummary"
    compileSdk = 35

    defaultConfig {
        minSdk = 24
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.material.icons.extended)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.hilt.android)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.material3.android)
    implementation(libs.firebase.common.ktx)
    implementation(libs.androidx.lifecycle.runtime.compose)
    implementation(libs.androidx.ui.tooling.preview.android)
    ksp(libs.hilt.compiler)
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.ai)

    // Media3 ExoPlayer
    implementation(libs.androidx.media3.exoplayer)
    implementation(libs.androidx.media3.ui)

    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
}


--- END OF FILE samples/gemini-video-summarization/build.gradle.kts ---


--- START OF FILE samples/gemini-video-summarization/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--- END OF FILE samples/gemini-video-summarization/proguard-rules.pro ---


--- START OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/VideoSummarizationScreen.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminivideosummary

import android.content.Intent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults.topAppBarColors
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.net.toUri
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.media3.common.MediaItem
import androidx.media3.exoplayer.ExoPlayer
import com.android.ai.samples.geminivideosummary.player.VideoPlayer
import com.android.ai.samples.geminivideosummary.player.VideoSelectionDropdown
import com.android.ai.samples.geminivideosummary.ui.OutputTextDisplay
import com.android.ai.samples.geminivideosummary.ui.TextToSpeechControls
import com.android.ai.samples.geminivideosummary.util.sampleVideoList
import com.android.ai.samples.geminivideosummary.viewmodel.SummarizationState
import com.android.ai.samples.geminivideosummary.viewmodel.TtsState
import com.android.ai.samples.geminivideosummary.viewmodel.VideoSummarizationState
import com.android.ai.samples.geminivideosummary.viewmodel.VideoSummarizationViewModel
import com.google.com.android.ai.samples.geminivideosummary.R
import java.util.Locale

/**
 * Composable function for the AI Video Summarization screen.
 *
 * This screen allows users to select a video, play it, and generate a summary of its content
 * using Firebase AI. It also provides text-to-speech functionality to read out
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun VideoSummarizationScreen(viewModel: VideoSummarizationViewModel = hiltViewModel()) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    val context = LocalContext.current
    var isDropdownExpanded by remember { mutableStateOf(false) }

    val exoPlayer = remember(context) {
        ExoPlayer.Builder(context).build().apply {
            playWhenReady = true
        }
    }

    LaunchedEffect(uiState.selectedVideoUri) {
        uiState.selectedVideoUri?.let {
            exoPlayer.setMediaItem(MediaItem.fromUri(it))
            exoPlayer.prepare()
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                colors = topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.primary,
                ),
                title = {
                    Text(text = stringResource(R.string.video_summarization_title))
                },
                actions = {
                    SeeCodeButton()
                },
            )
        },
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(16.dp)
                .padding(innerPadding),
            verticalArrangement = Arrangement.spacedBy(16.dp),
        ) {
            VideoSelectionDropdown(
                selectedVideoUri = uiState.selectedVideoUri,
                isDropdownExpanded = isDropdownExpanded,
                videoOptions = sampleVideoList,
                onVideoUriSelected = { uri ->
                    viewModel.onVideoSelected(uri)
                },
                onDropdownExpanded = { isDropdownExpanded = it },
            )

            VideoPlayer(exoPlayer = exoPlayer, modifier = Modifier.fillMaxWidth())

            SummarizationSection(
                uiState = uiState,
                onSummarizeClick = {
                    viewModel.onTtsStateChanged(TtsState.Idle)
                    viewModel.summarize()
                },
                onTtsStateChanged = { ttsState ->
                    viewModel.onTtsStateChanged(ttsState)
                },
                onAccentSelected = { accent ->
                    viewModel.onAccentSelected(accent)
                },
                onDismissError = { viewModel.dismissError() },
                onTtsInitializationResult = { isSuccess, errorMessage ->
                    viewModel.onTtsInitializationResult(isSuccess, errorMessage)
                },
            )
        }
    }

    DisposableEffect(key1 = exoPlayer) {
        onDispose {
            exoPlayer.release()
        }
    }
}

@Composable
private fun SummarizationSection(
    uiState: VideoSummarizationState,
    onSummarizeClick: () -> Unit,
    onTtsStateChanged: (TtsState) -> Unit,
    onAccentSelected: (Locale) -> Unit,
    onDismissError: () -> Unit,
    onTtsInitializationResult: (Boolean, String?) -> Unit,
) {
    Column(
        verticalArrangement = Arrangement.spacedBy(16.dp),
    ) {
        Button(
            modifier = Modifier.fillMaxWidth(),
            onClick = onSummarizeClick,
            enabled = uiState.summarizationState != SummarizationState.InProgress,
        ) {
            Text(stringResource(R.string.summarize_video_button))
        }

        when (val summarizationState = uiState.summarizationState) {
            is SummarizationState.InProgress -> {
                CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))
            }

            is SummarizationState.Error -> {
                AlertDialog(
                    onDismissRequest = onDismissError,
                    title = { Text("Error") },
                    text = { Text(summarizationState.message) },
                    confirmButton = {
                        Button(onClick = onDismissError) {
                            Text("OK")
                        }
                    },
                )
            }

            is SummarizationState.Success -> {
                TextToSpeechControls(
                    ttsState = summarizationState.ttsState,
                    speechText = summarizationState.summarizedText,
                    selectedAccent = uiState.selectedAccent,
                    accentOptions = accentOptions,
                    onTtsStateChange = onTtsStateChanged,
                    onAccentSelected = onAccentSelected,
                    onInitializationResult = onTtsInitializationResult,
                )
                OutputTextDisplay(summarizationState.summarizedText, modifier = Modifier.weight(1f))
            }
            is SummarizationState.Idle -> {
                // Nothing to show
            }
        }
    }
}

private val accentOptions = listOf(
    Locale.UK,
    Locale.FRANCE,
    Locale.GERMANY,
    Locale.ITALY,
    Locale.JAPAN,
    Locale.KOREA,
    Locale.US,
)

@Composable
fun SeeCodeButton() {
    val context = LocalContext.current
    val githubLink =
        "https://github.com/android/ai-samples/tree/main/ai-catalog/samples/gemini-video-summarization"
    Button(
        onClick = {
            val intent = Intent(Intent.ACTION_VIEW, githubLink.toUri())
            context.startActivity(intent)
        },
    ) {
        Icon(Icons.Filled.Code, contentDescription = "See code")
        Text(
            modifier = Modifier.padding(start = 8.dp),
            fontSize = 12.sp,
            text = stringResource(R.string.see_code),
        )
    }
}


--- END OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/VideoSummarizationScreen.kt ---


--- START OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/player/VideoPlayer.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminivideosummary.player

import androidx.compose.foundation.layout.height
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.media3.exoplayer.ExoPlayer
import androidx.media3.ui.PlayerView

/*
 * A Composable function that displays video using ExoPlayer within a PlayerView in Jetpack Compose.
 */
@Composable
fun VideoPlayer(exoPlayer: ExoPlayer, modifier: Modifier = Modifier) {
    val context = LocalContext.current
    AndroidView(
        factory = {
            PlayerView(context).apply {
                player = exoPlayer
            }
        }, modifier = modifier.height(200.dp),
    )
}


--- END OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/player/VideoPlayer.kt ---


--- START OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/player/VideoSelectionDropdown.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminivideosummary.player

import android.net.Uri
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import com.android.ai.samples.geminivideosummary.util.VideoItem
import com.google.com.android.ai.samples.geminivideosummary.R

/**
 * A composable function that displays a dropdown menu for selecting a video from a list of options.
 */
@Composable
fun VideoSelectionDropdown(
    selectedVideoUri: Uri?,
    isDropdownExpanded: Boolean,
    videoOptions: List<VideoItem>,
    onVideoUriSelected: (Uri) -> Unit,
    onDropdownExpanded: (Boolean) -> Unit,
) {
    Box {
        OutlinedTextField(
            value = selectedVideoUri?.let {
                videoOptions.firstOrNull { videoItem -> videoItem.uri == selectedVideoUri }?.let { stringResource(it.titleResId) }
            } ?: stringResource(R.string.select_video_placeholder),
            onValueChange = { },
            readOnly = true,
            trailingIcon = {
                Icon(
                    imageVector = Icons.Filled.ArrowDropDown,
                    contentDescription = stringResource(R.string.dropdown_content_description),
                    modifier = Modifier.clickable { onDropdownExpanded(!isDropdownExpanded) },
                )
            },
            modifier = Modifier.fillMaxWidth()
                .clickable { onDropdownExpanded(!isDropdownExpanded) },
        )

        DropdownMenu(
            expanded = isDropdownExpanded,
            onDismissRequest = { onDropdownExpanded(false) },
            modifier = Modifier.fillMaxWidth(),
        ) {
            videoOptions.forEach { videoItem ->
                DropdownMenuItem(text = { Text(stringResource(videoItem.titleResId)) }, onClick = {
                    onVideoUriSelected(videoItem.uri)
                    onDropdownExpanded(false)
                })
            }
        }
    }
}


--- END OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/player/VideoSelectionDropdown.kt ---


--- START OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/ui/OutputTextDisplay.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminivideosummary.ui

import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontStyle
import com.google.com.android.ai.samples.geminivideosummary.R

/**
 * Composable function that displays text.
 *
 * This function renders the generated text, providing a styled display within a scrollable container.
 */
@Composable
fun OutputTextDisplay(outputText: String, modifier: Modifier = Modifier) {
    Text(
        text = stringResource(
            R.string.output_text_combined,
            stringResource(R.string.output_text_generated_placeholder),
            outputText,
        ),
        fontStyle = FontStyle.Italic,
        modifier = modifier
            .fillMaxWidth()
            .verticalScroll(rememberScrollState()),
        style = MaterialTheme.typography.labelLarge,
    )
}


--- END OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/ui/OutputTextDisplay.kt ---


--- START OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/ui/TextToSpeechControls.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminivideosummary.ui

import android.content.Context
import android.speech.tts.TextToSpeech
import android.util.Log
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material3.Button
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.android.ai.samples.geminivideosummary.viewmodel.TtsState
import com.google.com.android.ai.samples.geminivideosummary.R
import java.util.Locale

/**
 * Composable function that provides controls for Text-to-Speech functionality.
 *
 * This function displays a UI that allows the user to:
 * - Select a language accent for the Text-to-Speech engine.
 * - Initiate speech synthesis for the provided text.
 * - Pause the ongoing speech.
 */
@Composable
fun TextToSpeechControls(
    ttsState: TtsState,
    speechText: String,
    selectedAccent: Locale,
    accentOptions: List<Locale>,
    onTtsStateChange: (TtsState) -> Unit,
    onAccentSelected: (Locale) -> Unit,
    onInitializationResult: (Boolean, String?) -> Unit,
) {
    var textToSpeech by remember { mutableStateOf<TextToSpeech?>(null) }
    var isAccentDropdownExpanded by remember { mutableStateOf(false) }
    val context = LocalContext.current

    DisposableEffect(key1 = true) {
        textToSpeech = initializeTextToSpeech(context, onInitializationResult)
        onDispose {
            textToSpeech?.shutdown()
        }
    }

    LaunchedEffect(speechText, selectedAccent) {
        textToSpeech?.stop()
        onTtsStateChange(TtsState.Idle)
    }

    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically,
    ) {
        OutlinedTextField(
            value = selectedAccent.displayLanguage,
            onValueChange = { },
            readOnly = true,
            trailingIcon = {
                Icon(
                    imageVector = Icons.Filled.ArrowDropDown,
                    contentDescription = "Dropdown",
                    modifier = Modifier.clickable { isAccentDropdownExpanded = !isAccentDropdownExpanded },
                )
            },
            modifier = Modifier
                .clickable { isAccentDropdownExpanded = !isAccentDropdownExpanded }
                .padding(end = 8.dp)
                .weight(1f),
        )

        DropdownMenu(
            expanded = isAccentDropdownExpanded,
            onDismissRequest = { isAccentDropdownExpanded = false },
        ) {
            accentOptions.forEach { accent ->
                DropdownMenuItem(
                    text = { Text(accent.displayLanguage) },
                    onClick = {
                        onAccentSelected(accent)
                        isAccentDropdownExpanded = false
                    },
                )
            }
        }

        if (ttsState == TtsState.Idle || ttsState == TtsState.Paused) {
            Button(
                onClick = {
                    handleSpeakButtonClick(
                        textToSpeech, speechText, selectedAccent, onTtsStateChange,
                    )
                },
            ) {
                Text(text = stringResource(R.string.text_listen_to_ai_output))
            }
        }

        if (ttsState == TtsState.Playing) {
            Button(
                onClick = {
                    textToSpeech?.stop()
                    onTtsStateChange(TtsState.Paused)
                },
            ) {
                Text(text = stringResource(R.string.pause))
            }
        }
    }
}

private fun initializeTextToSpeech(context: Context, onResult: (Boolean, String?) -> Unit): TextToSpeech {
    return TextToSpeech(context) { status ->
        if (status == TextToSpeech.SUCCESS) {
            onResult(true, null)
        } else {
            val reason = when (status) {
                TextToSpeech.ERROR -> R.string.tts_generic_error
                TextToSpeech.ERROR_SYNTHESIS -> R.string.tts_synthesis_error
                TextToSpeech.ERROR_SERVICE -> R.string.tts_service_error
                TextToSpeech.ERROR_OUTPUT -> R.string.tts_output_error
                TextToSpeech.ERROR_NETWORK -> R.string.tts_network_error
                TextToSpeech.ERROR_NETWORK_TIMEOUT -> R.string.tts_network_timeout_error
                TextToSpeech.ERROR_NOT_INSTALLED_YET -> R.string.tts_not_installed_error
                else -> R.string.tts_unknown_error
            }
            val errorMessage = context.getString(R.string.tts_error_message, context.getString(reason))
            Log.e("TextToSpeech", errorMessage)
            onResult(false, errorMessage)
        }
    }
}

private fun handleSpeakButtonClick(
    textToSpeech: TextToSpeech?,
    textForSpeech: String,
    selectedAccent: Locale,
    onTtsStateChange: (TtsState) -> Unit,
) {
    // Check if the voice and language is supported
    val result = textToSpeech?.voice?.locale?.let {
        textToSpeech.setLanguage(selectedAccent)
    }
    if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {
        Log.e("TextToSpeech", "Language not supported")
    } else {
        // Start speaking
        textToSpeech?.speak(
            textForSpeech, TextToSpeech.QUEUE_FLUSH, null, null,
        )
        onTtsStateChange(TtsState.Playing)
    }
}


--- END OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/ui/TextToSpeechControls.kt ---


--- START OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/util/VideoList.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminivideosummary.util

import android.net.Uri
import androidx.core.net.toUri
import com.google.com.android.ai.samples.geminivideosummary.R

/**
 * Data class to represent a video item with a title and URI.
 */
data class VideoItem(
    val titleResId: Int,
    val uri: Uri,
)

val sampleVideoList = listOf(
    VideoItem(
        R.string.video_title_big_buck_bunny,
        "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4".toUri(),
    ),
    VideoItem(
        R.string.video_title_android_spotlight_shorts,
        "https://storage.googleapis.com/exoplayer-test-media-0/shorts_android_developers/shorts_10.mp4".toUri(),
    ),
    VideoItem(
        R.string.video_title_rio_de_janeiro,
        "gs://cloud-samples-data/generative-ai/video/rio_de_janeiro_beyond_the_map_rio.mp4".toUri(),
    ),
    VideoItem(
        R.string.video_title_youtube_google_tv,
        "https://www.youtube.com/watch?v=QFMIP5GOo70".toUri(),
    ),
    VideoItem(
        R.string.video_title_tears_of_steel,
        "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4".toUri(),
    ),
    VideoItem(
        R.string.video_title_for_bigger_blazes,
        "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4".toUri(),
    ),
    VideoItem(
        R.string.video_title_for_bigger_escape,
        "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4".toUri(),
    ),
)


--- END OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/util/VideoList.kt ---


--- START OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/viewmodel/VideoSummarizationViewModel.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.geminivideosummary.viewmodel

import android.net.Uri
import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.ai.samples.geminivideosummary.util.sampleVideoList
import com.google.firebase.Firebase
import com.google.firebase.ai.ai
import com.google.firebase.ai.type.GenerativeBackend
import com.google.firebase.ai.type.content
import java.util.Locale
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch

/**
 * ViewModel class responsible for handling video summarization using Gemini API.
 *
 * This ViewModel interacts with the Gemini API to generate a text summary of a provided video.
 * It manages the state of the summarization process and exposes the output text through a
 * [StateFlow].
 */
class VideoSummarizationViewModel @Inject constructor() : ViewModel() {

    private val tag = "VideoSummaryVM"
    private val _uiState = MutableStateFlow(VideoSummarizationState())
    val uiState: StateFlow<VideoSummarizationState> = _uiState.asStateFlow()

    fun onVideoSelected(uri: Uri) {
        _uiState.update { it.copy(selectedVideoUri = uri, summarizationState = SummarizationState.Idle) }
    }

    fun onAccentSelected(locale: Locale) {
        _uiState.update { it.copy(selectedAccent = locale) }
    }

    fun onTtsStateChanged(newTtsState: TtsState) {
        val currentState = _uiState.value.summarizationState
        if (currentState is SummarizationState.Success) {
            _uiState.update {
                it.copy(summarizationState = currentState.copy(ttsState = newTtsState))
            }
        }
    }

    fun onTtsInitializationResult(isSuccess: Boolean, errorMessage: String?) {
        if (!isSuccess && errorMessage != null) {
            _uiState.update {
                it.copy(summarizationState = SummarizationState.Error(errorMessage))
            }
        }
    }

    fun summarize() {
        val videoSource = _uiState.value.selectedVideoUri ?: return
        viewModelScope.launch {
            val promptData =
                "Summarize this video in the form of top 3-4 takeaways only. Write in the form of bullet points. Don't assume if you don't know"
            _uiState.update { it.copy(summarizationState = SummarizationState.InProgress) }

            try {
                val generativeModel =
                    Firebase.ai(backend = GenerativeBackend.vertexAI())
                        .generativeModel("gemini-2.0-flash")

                val requestContent = content {
                    fileData(videoSource.toString(), "video/mp4")
                    text(promptData)
                }
                val outputStringBuilder = StringBuilder()
                generativeModel.generateContentStream(requestContent).collect { response ->
                    outputStringBuilder.append(response.text)
                }
                _uiState.update {
                    it.copy(
                        summarizationState = SummarizationState.Success(outputStringBuilder.toString()),
                    )
                }
            } catch (error: Exception) {
                _uiState.update {
                    it.copy(
                        summarizationState = SummarizationState.Error(error.localizedMessage ?: "An unknown error occurred"),
                    )
                }
                Log.e(tag, "Error processing prompt : $error")
            }
        }
    }

    fun dismissError() {
        _uiState.update { it.copy(summarizationState = SummarizationState.Idle) }
    }
}

sealed interface SummarizationState {
    data object Idle : SummarizationState
    data object InProgress : SummarizationState
    data class Error(val message: String) : SummarizationState
    data class Success(
        val summarizedText: String,
        val ttsState: TtsState = TtsState.Idle,
    ) : SummarizationState
}

sealed interface TtsState {
    data object Idle : TtsState
    data object Playing : TtsState
    data object Paused : TtsState
}

data class VideoSummarizationState(
    val selectedVideoUri: Uri? = sampleVideoList.first().uri,
    val summarizationState: SummarizationState = SummarizationState.Idle,
    val selectedAccent: Locale = Locale.US,
)


--- END OF FILE samples/gemini-video-summarization/src/main/java/com/android/ai/samples/geminivideosummary/viewmodel/VideoSummarizationViewModel.kt ---


--- START OF FILE samples/gemini-video-summarization/src/main/res/values/strings.xml ---

<resources>
    <string name="app_name">Gemini Video Summary</string>
    <string name="select_video_placeholder">Select Video</string>
    <string name="summarize_video_button">Summarize Video</string>
    <string name="video_summarization_title">Video summarization</string>
    <string name="output_text_combined">%s%s</string>
    <string name="output_text_generated_placeholder">"Text generated with Gemini : "</string>
    <string name="text_listen_to_ai_output">Listen to AI output</string>
    <string name="pause">Pause</string>
    <string name="see_code">See Code</string>
    <string name="dropdown_content_description">Dropdown for selecting a video</string>

    <!--Video titles for list of sample videos-->
    <string name="video_title_big_buck_bunny">Big Buck Bunny</string>
    <string name="video_title_android_spotlight_shorts">Android Spotlight Week (Shorts video)</string>
    <string name="video_title_rio_de_janeiro">Rio De Janerio</string>
    <string name="video_title_youtube_google_tv">Youtube Link (On Device Watch Next with Google TV)</string>
    <string name="video_title_tears_of_steel">Tears of Steel</string>
    <string name="video_title_for_bigger_blazes">For Bigger Blazes</string>
    <string name="video_title_for_bigger_escape">For Bigger Escape</string>

    <!--TTS Errors-->
    <string name="tts_generic_error">a generic error.</string>
    <string name="tts_synthesis_error">a synthesis error.</string>
    <string name="tts_service_error">an error with the service.</string>
    <string name="tts_output_error">an error writing the audio.</string>
    <string name="tts_network_error">a network error.</string>
    <string name="tts_network_timeout_error">a network timeout.</string>
    <string name="tts_not_installed_error">the required voice data has not been installed.</string>
    <string name="tts_unknown_error">an unknown error.</string>
    <string name="tts_error_message">TTS Initialization failed: %s</string>

</resources>

--- END OF FILE samples/gemini-video-summarization/src/main/res/values/strings.xml ---


--- START OF FILE samples/genai-image-description/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.android.ai.samples.geminimultimodal"
    compileSdk = 35

    buildFeatures {
        compose = true
    }

    defaultConfig {
        minSdk = 26

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.15"
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.hilt.android)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.runtime.livedata)
    implementation(libs.genai.image.description)
    implementation(libs.coil.compose)
    implementation(libs.kotlinx.coroutines.guava)
    implementation(libs.androidx.lifecycle.runtime.compose)
    ksp(libs.hilt.compiler)
}


--- END OF FILE samples/genai-image-description/build.gradle.kts ---


--- START OF FILE samples/genai-image-description/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--- END OF FILE samples/genai-image-description/proguard-rules.pro ---


--- START OF FILE samples/genai-image-description/src/main/java/com/android/ai/samples/genai_image_description/GenAIImageDescriptionScreen.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.genai_image_description

import android.content.Intent
import android.net.Uri
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.PickVisualMediaRequest
import androidx.activity.result.contract.ActivityResultContracts.PickVisualMedia
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults.topAppBarColors
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.net.toUri
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import coil3.compose.AsyncImage
import com.android.ai.samples.geminimultimodal.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GenAIImageDescriptionScreen(viewModel: GenAIImageDescriptionViewModel = hiltViewModel()) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()

    var imageUri by remember { mutableStateOf<Uri?>(null) }
    val photoPickerLauncher = rememberLauncherForActivityResult(PickVisualMedia()) { uri ->
        uri?.let {
            imageUri = it
        }
    }

    Scaffold(
        modifier = Modifier.fillMaxSize(),
        topBar = {
            TopAppBar(
                colors = topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.primary,
                ),
                title = {
                    Text(text = stringResource(id = R.string.genai_image_description_title_bar))
                },
                actions = {
                    SeeCodeButton()
                },
            )
        },
    ) { innerPadding ->
        Column(
            modifier = Modifier.padding(innerPadding),
        ) {
            // Displayed image
            Card(
                modifier = Modifier
                    .size(width = 450.dp, height = 450.dp)
                    .padding(20.dp),
            ) {
                AsyncImage(
                    model = imageUri,
                    contentDescription = null,
                    contentScale = ContentScale.Fit,
                    modifier = Modifier.fillMaxSize(),
                )
            }

            // Select image button
            Button(
                onClick = {
                    photoPickerLauncher.launch(PickVisualMediaRequest(PickVisualMedia.ImageOnly))
                },
                modifier = Modifier
                    .padding(10.dp)
                    .align(Alignment.CenterHorizontally),
            ) {
                Text(
                    text = stringResource(id = R.string.genai_image_description_add_image),
                )
            }

            // Generate image description button
            Button(
                onClick = {
                    viewModel.getImageDescription(imageUri)
                },
                modifier = Modifier
                    .padding(10.dp)
                    .align(Alignment.CenterHorizontally),
            ) {
                Text(
                    text = stringResource(id = R.string.genai_image_description_run_inference),
                )
            }

            val outputText = when (val state = uiState) {
                is GenAIImageDescriptionUiState.DownloadingFeature -> stringResource(
                    id = R.string.image_desc_downloading,
                    state.bytesDownloaded,
                    state.bytesToDownload,
                )

                is GenAIImageDescriptionUiState.Error -> stringResource(state.errorMessageStringRes)
                is GenAIImageDescriptionUiState.Generating -> state.partialOutput
                is GenAIImageDescriptionUiState.Success -> state.generatedOutput
                GenAIImageDescriptionUiState.CheckingFeatureStatus -> stringResource(id = R.string.image_desc_checking_feature_status)
                else -> "" // Show nothing for the Initial state
            }

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .padding(horizontal = 16.dp, vertical = 8.dp),
            ) {
                Text(
                    text = outputText,
                    modifier = Modifier.padding(16.dp),
                )
            }
        }
    }
}

@Composable
fun SeeCodeButton() {
    val context = LocalContext.current
    val githubLink = "https://github.com/android/ai-samples/tree/main/ai-catalog/samples/genai-image-description"

    Button(
        onClick = {
            val intent = Intent(Intent.ACTION_VIEW, githubLink.toUri())
            context.startActivity(intent)
        },
        modifier = Modifier.padding(end = 8.dp),
    ) {
        Icon(Icons.Filled.Code, contentDescription = "See code")
        Text(
            modifier = Modifier.padding(start = 8.dp),
            fontSize = 12.sp,
            text = stringResource(R.string.genai_image_see_code),
        )
    }
}


--- END OF FILE samples/genai-image-description/src/main/java/com/android/ai/samples/genai_image_description/GenAIImageDescriptionScreen.kt ---


--- START OF FILE samples/genai-image-description/src/main/java/com/android/ai/samples/genai_image_description/GenAIImageDescriptionViewModel.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.genai_image_description

import android.app.Application
import android.net.Uri
import android.provider.MediaStore
import android.util.Log
import androidx.annotation.StringRes
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.android.ai.samples.geminimultimodal.R
import com.google.mlkit.genai.common.DownloadCallback
import com.google.mlkit.genai.common.FeatureStatus
import com.google.mlkit.genai.common.GenAiException
import com.google.mlkit.genai.imagedescription.ImageDescriber
import com.google.mlkit.genai.imagedescription.ImageDescriberOptions
import com.google.mlkit.genai.imagedescription.ImageDescription
import com.google.mlkit.genai.imagedescription.ImageDescriptionRequest
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.guava.await
import kotlinx.coroutines.launch

sealed class GenAIImageDescriptionUiState {
    data object Initial : GenAIImageDescriptionUiState()
    data object CheckingFeatureStatus : GenAIImageDescriptionUiState()
    data class DownloadingFeature(
        val bytesToDownload: Long,
        val bytesDownloaded: Long,
    ) : GenAIImageDescriptionUiState()

    data class Generating(val partialOutput: String) : GenAIImageDescriptionUiState()
    data class Success(val generatedOutput: String) : GenAIImageDescriptionUiState()
    data class Error(@StringRes val errorMessageStringRes: Int) : GenAIImageDescriptionUiState()
}

class GenAIImageDescriptionViewModel @Inject constructor(val context: Application) : AndroidViewModel(context) {
    private val _uiState = MutableStateFlow<GenAIImageDescriptionUiState>(GenAIImageDescriptionUiState.Initial)
    val uiState: StateFlow<GenAIImageDescriptionUiState> = _uiState.asStateFlow()

    private var imageDescriber: ImageDescriber = ImageDescription.getClient(
        ImageDescriberOptions.builder(context).build(),
    )

    fun getImageDescription(imageUri: Uri?) {
        if (imageUri == null) {
            _uiState.value = GenAIImageDescriptionUiState.Error(R.string.genai_image_description_no_image_selected)
            return
        }

        viewModelScope.launch {
            var featureStatus = FeatureStatus.UNAVAILABLE

            try {
                _uiState.value = GenAIImageDescriptionUiState.CheckingFeatureStatus
                featureStatus = imageDescriber.checkFeatureStatus().await()
            } catch (error: Exception) {
                _uiState.value = GenAIImageDescriptionUiState.Error(R.string.image_desc_feature_check_fail)
                Log.e("GenAIImageDesc", "Error checking feature status", error)
            }

            if (featureStatus == FeatureStatus.UNAVAILABLE) {
                _uiState.value = GenAIImageDescriptionUiState.Error(R.string.genai_image_description_not_available)
                return@launch
            }

            if (featureStatus == FeatureStatus.DOWNLOADABLE || featureStatus == FeatureStatus.DOWNLOADING) {
                imageDescriber.downloadFeature(
                    object : DownloadCallback {
                        override fun onDownloadStarted(bytesToDownload: Long) {
                            _uiState.value = GenAIImageDescriptionUiState.DownloadingFeature(bytesToDownload, 0)
                        }

                        override fun onDownloadProgress(bytesDownloaded: Long) {
                            _uiState.update {
                                (it as? GenAIImageDescriptionUiState.DownloadingFeature)?.copy(bytesDownloaded = bytesDownloaded) ?: it
                            }
                        }

                        override fun onDownloadCompleted() {
                            viewModelScope.launch {
                                generateImageDescription(imageUri)
                            }
                        }

                        override fun onDownloadFailed(exception: GenAiException) {
                            Log.e("GenAIImageDesc", "Download failed", exception)
                            _uiState.value = GenAIImageDescriptionUiState.Error(R.string.image_desc_download_failed)
                        }
                    },
                )
            } else {
                generateImageDescription(imageUri)
            }
        }
    }

    private suspend fun generateImageDescription(imageUri: Uri) {
        _uiState.value = GenAIImageDescriptionUiState.Generating("")
        val bitmap = MediaStore.Images.Media.getBitmap(context.contentResolver, imageUri)
        val request = ImageDescriptionRequest.builder(bitmap).build()

        imageDescriber.runInference(request) { newText ->
            _uiState.update {
                (it as? GenAIImageDescriptionUiState.Generating)?.copy(partialOutput = it.partialOutput + newText) ?: it
            }
        }.await()

        (_uiState.value as? GenAIImageDescriptionUiState.Generating)?.partialOutput?.let { generatedOutput ->
            _uiState.value = GenAIImageDescriptionUiState.Success(generatedOutput)
        }
    }

    override fun onCleared() {
        imageDescriber.close()
    }
}


--- END OF FILE samples/genai-image-description/src/main/java/com/android/ai/samples/genai_image_description/GenAIImageDescriptionViewModel.kt ---


--- START OF FILE samples/genai-image-description/src/main/res/values/strings.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="genai_image_description_title_bar">Image Description with Nano</string>
    <string name="genai_image_description_add_image">Add image</string>
    <string name="genai_image_description_run_inference">Generate image description</string>
    <string name="genai_image_description_no_image_selected">No image selected</string>
    <string name="genai_image_description_not_available">Feature is not available on this device</string>
    <string name="genai_image_see_code">See code</string>
    <string name="image_desc_feature_check_fail">Error checking feature status</string>
    <string name="image_desc_download_failed">Feature download failed</string>
    <string name="image_desc_downloading">Downloading feature: %1$d / %2$d bytes</string>
    <string name="image_desc_checking_feature_status">Checking feature status</string>
    <string name="image_desc_generation_error">Error generating summary</string>
</resources>


--- END OF FILE samples/genai-image-description/src/main/res/values/strings.xml ---


--- START OF FILE samples/genai-summarization/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.android.ai.samples.geminimultimodal"
    compileSdk = 35

    buildFeatures {
        compose = true
    }

    defaultConfig {
        minSdk = 26

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.15"
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.hilt.android)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.runtime.livedata)
    implementation(libs.genai.summarization)
    implementation(libs.kotlinx.coroutines.guava)
    implementation(libs.androidx.lifecycle.runtime.compose)
    ksp(libs.hilt.compiler)
}


--- END OF FILE samples/genai-summarization/build.gradle.kts ---


--- START OF FILE samples/genai-summarization/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--- END OF FILE samples/genai-summarization/proguard-rules.pro ---


--- START OF FILE samples/genai-summarization/src/main/java/com/android/ai/samples/genai_summarization/GenAISummarizationScreen.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.genai_summarization

import android.content.Intent
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalBottomSheet
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults.topAppBarColors
import androidx.compose.material3.rememberModalBottomSheetState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringArrayResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.net.toUri
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.android.ai.samples.geminimultimodal.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GenAISummarizationScreen(viewModel: GenAISummarizationViewModel = hiltViewModel()) {
    val sampleTextOptions = stringArrayResource(R.array.summarization_sample_text)

    val sheetState = rememberModalBottomSheetState()

    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    var textInput by remember { mutableStateOf("") }

    Scaffold(
        modifier = Modifier.fillMaxSize(),
        topBar = {
            TopAppBar(
                colors = topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer,
                ),
                title = {
                    Text(text = stringResource(id = R.string.genai_summarization_title_bar))
                },
                actions = {
                    SeeCodeButton()
                },
            )
        },
    ) { innerPadding ->

        Column(
            Modifier
                .padding(12.dp)
                .padding(innerPadding),
        ) {
            // Text input box
            TextField(
                value = textInput,
                onValueChange = { textInput = it },
                label = { Text(stringResource(id = R.string.genai_summarization_text_input_label)) },
                modifier = Modifier
                    .fillMaxSize()
                    .weight(.8f),
            )

            // Summarize button
            Button(
                onClick = {
                    viewModel.summarize(textInput)
                },
                enabled = textInput.isNotEmpty(),
                modifier = Modifier
                    .padding(10.dp)
                    .align(Alignment.CenterHorizontally),
            ) {
                Text(
                    text = stringResource(id = R.string.genai_summarization_summarize_btn),
                )
            }

            // Extra options buttons
            Row(modifier = Modifier.align(Alignment.CenterHorizontally)) {
                OutlinedButton(
                    onClick = { textInput = sampleTextOptions.random() },
                    Modifier.padding(5.dp),
                ) {
                    Text(
                        stringResource(id = R.string.genai_summarization_add_text_btn),
                    )
                }
                OutlinedButton(
                    onClick = { textInput = "" },
                    Modifier.padding(5.dp),
                ) {
                    Text(
                        stringResource(id = R.string.genai_summarization_reset_btn),
                    )
                }
            }
        }

        if (uiState !is GenAISummarizationUiState.Initial) {
            val bottomSheetText = when (val state = uiState) {
                is GenAISummarizationUiState.DownloadingFeature -> stringResource(
                    id = R.string.summarization_downloading,
                    state.bytesDownloaded,
                    state.bytesToDownload,
                )
                is GenAISummarizationUiState.Error -> state.errorMessage
                is GenAISummarizationUiState.Generating -> state.generatedOutput
                GenAISummarizationUiState.Initial -> ""
                is GenAISummarizationUiState.Success -> state.generatedOutput
                GenAISummarizationUiState.CheckingFeatureStatus -> stringResource(id = R.string.summarization_checking_feature_status)
            }
            ModalBottomSheet(
                onDismissRequest = {
                    viewModel.clearGeneratedSummary()
                },
                sheetState = sheetState,
            ) {
                Text(
                    text = bottomSheetText,
                    modifier = Modifier.padding(
                        top = 8.dp,
                        bottom = 24.dp,
                        start = 24.dp,
                        end = 24.dp,
                    ),
                )
            }
        }
    }
}

@Composable
fun SeeCodeButton() {
    val context = LocalContext.current
    val githubLink = "https://github.com/android/ai-samples/tree/main/ai-catalog/samples/genai-summarization"

    Button(
        onClick = {
            val intent = Intent(Intent.ACTION_VIEW, githubLink.toUri())
            context.startActivity(intent)
        },
        modifier = Modifier.padding(end = 8.dp),
    ) {
        Icon(Icons.Filled.Code, contentDescription = "See code")
        Text(
            modifier = Modifier.padding(start = 8.dp),
            fontSize = 12.sp,
            text = stringResource(R.string.summarization_see_code),
        )
    }
}


--- END OF FILE samples/genai-summarization/src/main/java/com/android/ai/samples/genai_summarization/GenAISummarizationScreen.kt ---


--- START OF FILE samples/genai-summarization/src/main/java/com/android/ai/samples/genai_summarization/GenAISummarizationViewModel.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.genai_summarization

import android.app.Application
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.android.ai.samples.geminimultimodal.R
import com.google.mlkit.genai.common.DownloadCallback
import com.google.mlkit.genai.common.FeatureStatus
import com.google.mlkit.genai.common.GenAiException
import com.google.mlkit.genai.summarization.Summarization
import com.google.mlkit.genai.summarization.SummarizationRequest
import com.google.mlkit.genai.summarization.Summarizer
import com.google.mlkit.genai.summarization.SummarizerOptions
import javax.inject.Inject
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.guava.await
import kotlinx.coroutines.launch

sealed class GenAISummarizationUiState {
    data object Initial : GenAISummarizationUiState()
    data object CheckingFeatureStatus : GenAISummarizationUiState()
    data class DownloadingFeature(
        val bytesToDownload: Long,
        val bytesDownloaded: Long,
    ) : GenAISummarizationUiState()

    data class Generating(val generatedOutput: String) : GenAISummarizationUiState()
    data class Success(val generatedOutput: String) : GenAISummarizationUiState()
    data class Error(val errorMessage: String) : GenAISummarizationUiState()
}

class GenAISummarizationViewModel @Inject constructor(val context: Application) : AndroidViewModel(context) {
    private val _uiState = MutableStateFlow<GenAISummarizationUiState>(GenAISummarizationUiState.Initial)
    val uiState: StateFlow<GenAISummarizationUiState> = _uiState.asStateFlow()

    private var summarizer = Summarization.getClient(
        SummarizerOptions.builder(context)
            .setOutputType(SummarizerOptions.OutputType.THREE_BULLETS)
            .build(),
    )
    private var summarizationJob: Job? = null

    fun summarize(textToSummarize: String) {
        if (textToSummarize.isEmpty()) {
            _uiState.value = GenAISummarizationUiState.Error(context.getString(R.string.summarization_no_input))
            return
        }

        summarizationJob = viewModelScope.launch {
            var featureStatus = FeatureStatus.UNAVAILABLE

            try {
                _uiState.value = GenAISummarizationUiState.CheckingFeatureStatus
                featureStatus = summarizer.checkFeatureStatus().await()
            } catch (error: Exception) {
                _uiState.value = GenAISummarizationUiState.Error(context.getString(R.string.summarization_feature_check_fail))
                Log.e("GenAISummarization", "Error checking feature status", error)
            }

            if (featureStatus == FeatureStatus.UNAVAILABLE) {
                _uiState.value = GenAISummarizationUiState.Error(context.getString(R.string.summarization_not_available))
                return@launch
            }

            // If feature is downloadable, making an inference call will automatically start
            // the downloading process.
            // If feature is downloading, the inference request will automatically execute after
            // the feature has been downloaded.
            // Alternatively, you can call summarizer.downloadFeature() to monitor the
            // progress of the download.
            // Calling downloadFeature() while the feature is already downloading will not start another download.
            if (featureStatus == FeatureStatus.DOWNLOADABLE || featureStatus == FeatureStatus.DOWNLOADING) {
                summarizer.downloadFeature(
                    object : DownloadCallback {
                        override fun onDownloadStarted(bytesToDownload: Long) {
                            _uiState.value = GenAISummarizationUiState.DownloadingFeature(bytesToDownload, 0)
                        }

                        override fun onDownloadProgress(bytesDownloaded: Long) {
                            (_uiState.value as? GenAISummarizationUiState.DownloadingFeature)?.bytesToDownload?.let { bytesToDownload ->
                                _uiState.value = GenAISummarizationUiState.DownloadingFeature(bytesToDownload, bytesDownloaded)
                            }
                        }

                        override fun onDownloadCompleted() {
                            viewModelScope.launch {
                                generateSummarization(summarizer, textToSummarize)
                            }
                        }

                        override fun onDownloadFailed(exception: GenAiException) {
                            Log.e("GenAISummarization", "Download failed", exception)
                            _uiState.value = GenAISummarizationUiState.Error(context.getString(R.string.summarization_download_failed))
                        }
                    },
                )
            } else {
                generateSummarization(summarizer, textToSummarize)
            }
        }
    }

    private suspend fun generateSummarization(summarizer: Summarizer, textToSummarize: String) {
        _uiState.value = GenAISummarizationUiState.Generating("")
        val summarizationRequest = SummarizationRequest.builder(textToSummarize).build()

        try {
            // Instead of using await() here, alternatively you can attach a FutureCallback<SummarizationResult>
            summarizer.runInference(summarizationRequest) { newText ->
                (_uiState.value as? GenAISummarizationUiState.Generating)?.let { generatingState ->
                    _uiState.value = generatingState.copy(generatedOutput = generatingState.generatedOutput + newText)
                }
            }.await()
        } catch (genAiException: GenAiException) {
            Log.e("GenAISummarization", "Error generating summary with error code: ${genAiException.errorCode}", genAiException)
            val errorMessage = genAiException.message ?: context.getString(R.string.summarization_generation_error)
            _uiState.value = GenAISummarizationUiState.Error(errorMessage)
        }

        (_uiState.value as? GenAISummarizationUiState.Generating)?.generatedOutput?.let { generatedOutput ->
            _uiState.value = GenAISummarizationUiState.Success(generatedOutput)
        }
    }

    fun clearGeneratedSummary() {
        _uiState.value = GenAISummarizationUiState.Initial
        summarizationJob?.cancel()
    }

    override fun onCleared() {
        summarizer.close()
    }
}


--- END OF FILE samples/genai-summarization/src/main/java/com/android/ai/samples/genai_summarization/GenAISummarizationViewModel.kt ---


--- START OF FILE samples/genai-summarization/src/main/res/values/strings.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="genai_summarization_title_bar">GenAI Summarization with Nano</string>
    <string name="genai_summarization_text_input_label">Enter text to summarizer</string>
    <string name="genai_summarization_summarize_btn">Summarize</string>
    <string name="genai_summarization_add_text_btn">Add example text</string>
    <string name="genai_summarization_reset_btn">Reset</string>
    <string-array name="summarization_sample_text">
        <item>@string/summarization_sample_text_1</item>
        <item>@string/summarization_sample_text_2</item>
        <item>@string/summarization_sample_text_3</item>
        <item>@string/summarization_sample_text_4</item>
        <item>@string/summarization_sample_text_5</item>
    </string-array>
    <string name="summarization_sample_text_1">Standing proudly at the foot of Market Street along the Embarcadero, the San Francisco Ferry Building is one of the most iconic landmarks of the city. Opened in 1898, this grand Beaux-Arts structure, designed by architect A. Page Brown, immediately became a symbol of the city, distinguished by its elegant arcades and soaring 245-foot clock tower, modeled after the 12th-century Giralda bell tower in Seville, Spain. For decades, the Ferry Building served as the primary gateway to San Francisco. Before the Golden Gate and Bay Bridges spanned the water, nearly everyone arrived and departed the city via ferry. At its peak in the 1930s, it was one of the busiest transit terminals in the world, bustling with up to 50,000 commuters daily. Remarkably, its robust steel frame allowed it to survive the devastating 1906 earthquake and fire with relatively little structural damage. With the opening of the bridges in the late 1930s and the rise of automobile travel, ferry traffic drastically declined. The building was converted largely into office space in the 1950s, the grand 660-foot-long skylit nave of the building obscured. The construction of the elevated Embarcadero Freeway further isolated it from the city. However, after the freeway was damaged in the 1989 Loma Prieta earthquake and subsequently removed, a new vision emerged. A meticulous, four-year, $110 million restoration culminated in the triumphant reopening of the building in 2003 as the Ferry Building Marketplace. The ground floor was transformed into a vibrant public market celebrating the artisan food producers of Northern California. Today, it houses acclaimed restaurants, cafes, and specialty food shops offering everything from artisan cheese and bread to oysters and chocolate. It remains an active ferry terminal, hosts a beloved farmers market multiple days a week, and contains desirable office space, successfully blending its historic past with a dynamic present as a culinary destination and community hub.</string>
    <string name="summarization_sample_text_2">Bubble tea, known also as boba tea, is a delightful drink that began its journey in Taiwan during the 1980s. It quickly grew from a local favorite to a global phenomenon, cherished for its unique combination of flavors and textures. At its core, bubble tea features a base of brewed tea. Popular choices include robust black tea, fragrant green tea, and nuanced oolong tea. This tea base is then typically blended with milk or a variety of fruit flavors, ranging from classic mango and passion fruit to more adventurous taro and matcha. Sweeteners are adjusted to personal preference, allowing for a wide spectrum of taste experiences. What truly sets bubble tea apart are the additions, most famously the chewy tapioca pearls. These small, dark spheres made from cassava starch provide a pleasant, resilient bite enjoyed through an oversized straw. Beyond tapioca, drinkers can choose from a diverse selection of toppings like grass jelly, aloe vera, and popping boba that burst with fruit juice. Bubble tea is more than just a drink; it represents a cultural trend and a social experience for many, particularly younger generations. Boba shops have become popular gathering spots, offering a casual and fun environment. Served cold, often shaken to create a frothy top layer which some believe is the origin of the name "bubble tea," this versatile beverage continues to evolve, with new combinations and styles appearing regularly across the world. Its enduring appeal lies in its customizability and the surprising joy of sipping and chewing this sweet, flavorful treat.</string>
    <string name="summarization_sample_text_3">Large Language Models built using the Transformer architecture have revolutionized how we interact with artificial intelligence, particularly in text-based applications. Understanding how they work involves grasping a few core concepts. At their heart, Transformer LLMs process text not just word by word sequentially, but by considering all words in a piece of text simultaneously. This is made possible by a mechanism called self-attention. Self-attention allows the model to weigh the importance of each word in relation to every other word in the input sequence, regardless of their position. This helps the model understand context and relationships between distant words, something earlier models struggled with. The original Transformer architecture had an encoder-decoder structure. The encoder processed the input text, building a rich representation, and the decoder used this representation to generate the output text. Many modern large LLMs, however, primarily use only the decoder part, trained to predict the next word in a sequence based on all the preceding words. When you provide text to a Transformer LLM, it first converts the words into numerical representations called embeddings. These embeddings capture some semantic meaning. The self-attention mechanism then processes these embeddings, allowing the model to refine its understanding of the input text context. Finally, the model generates output by predicting the most probable next word, based on the context it has processed. This predicted word is then added to the sequence, and the process repeats until a complete response is generated. This powerful attention mechanism and the ability to process text in parallel are key to the capabilities of todays leading LLMs. </string>
    <string name="summarization_sample_text_4">CRISPR-Cas9 is a revolutionary technology allowing scientists to precisely edit genes. Its mechanism, inspired by a natural defense system in bacteria, involves two key players: a protein called Cas9 and a guide RNA molecule. Think of Cas9 as molecular scissors capable of cutting DNA. The guide RNA acts like a navigation system for Cas9. Scientists design this small RNA molecule to have a sequence that matches the specific DNA they want to target and potentially alter. The guide RNA binds to the Cas9 protein, forming a complex that then searches the vast expanse of a cells DNA. When the guide RNA finds its complementary sequence in the DNA, it directs Cas9 to that exact location. Cas9 then makes a precise cut across both strands of the DNA double helix. This cut is the crucial step; it signals the cell to repair the DNA break. The cells natural repair machinery can fix this break in different ways. One way is to simply join the broken ends back together, which can sometimes lead to small errors that inactivate the gene. Alternatively, if scientists provide a corrected DNA sequence as a template, the cell can use it during the repair process, effectively inserting or correcting the genetic code at the cut site. This ability to make targeted changes to DNA holds immense promise for treating genetic diseases and advancing biological research.</string>"
    <string name="summarization_sample_text_5">Preparing for a marathon is a significant undertaking requiring dedication and consistent effort. It involves much more than simply running long distances; a well-rounded approach is crucial for success and injury prevention. A structured training plan forms the backbone of marathon preparation. This plan should gradually increase your weekly mileage, allowing your body to adapt to the growing demands. Consistency is paramount; sticking to your running schedule, which will include a mix of easy runs, tempo runs, and crucial long runs, builds the necessary endurance. Equally important is incorporating rest and recovery into your routine. Rest days allow muscles to repair and grow stronger, reducing the risk of overuse injuries that can derail training. Proper sleep is a vital part of this recovery process. Fueling your body correctly is another key element. A balanced diet providing sufficient carbohydrates for energy, along with adequate hydration, supports your training efforts and prepares you for race day demands. Experimenting with nutrition during long training runs helps determine what works best for your system. Finally, mental preparation plays a significant role. Building mental toughness and visualizing race day success can help you push through challenging moments during both training and the marathon itself. Approaching the process with patience and a positive mindset will enhance your overall experience.</string>"

    <string name="summarization_no_input">No text inputted</string>
    <string name="summarization_feature_check_fail">Error checking feature status</string>
    <string name="summarization_not_available">Feature is not available on this device</string>
    <string name="summarization_download_failed">Feature download failed</string>
    <string name="summarization_downloading">Downloading feature: %1$d / %2$d</string>
    <string name="summarization_checking_feature_status">Checking feature status</string>
    <string name="summarization_generation_error">Error generating summary</string>
    <string name="summarization_see_code">See code</string>
</resources>

--- END OF FILE samples/genai-summarization/src/main/res/values/strings.xml ---


--- START OF FILE samples/genai-writing-assistance/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.android.ai.samples.geminimultimodal"
    compileSdk = 35

    buildFeatures {
        compose = true
    }

    defaultConfig {
        minSdk = 26

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.androidx.material.icons.extended)
    implementation(libs.hilt.android)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.runtime.livedata)
    implementation(libs.genai.proofreading)
    implementation(libs.genai.rewrite)
    implementation(libs.kotlinx.coroutines.guava)
    ksp(libs.hilt.compiler)
}


--- END OF FILE samples/genai-writing-assistance/build.gradle.kts ---


--- START OF FILE samples/genai-writing-assistance/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--- END OF FILE samples/genai-writing-assistance/proguard-rules.pro ---


--- START OF FILE samples/genai-writing-assistance/src/main/java/com/android/ai/samples/genai_writing_assistance/GenAIWritingAssistanceScreen.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.genai_writing_assistance

import android.content.Intent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.selection.selectable
import androidx.compose.foundation.selection.selectableGroup
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalBottomSheet
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TextField
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults.topAppBarColors
import androidx.compose.material3.rememberModalBottomSheetState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringArrayResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.semantics.Role
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.core.net.toUri
import androidx.hilt.navigation.compose.hiltViewModel
import com.android.ai.samples.geminimultimodal.R
import com.google.mlkit.genai.rewriting.RewriterOptions

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GenAIWritingAssistanceScreen(viewModel: GenAIWritingAssistanceViewModel = hiltViewModel()) {

    val sheetState = rememberModalBottomSheetState()
    var showBottomSheet by remember { mutableStateOf(false) }
    var showRewriteOptionsDialog by remember { mutableStateOf(false) }
    val context = LocalContext.current

    val resultGenerated = viewModel.resultGenerated.collectAsState()

    val proofreadSampleTextOptions = stringArrayResource(R.array.proofread_sample_text)
    val rewriteSampleTextOptions = stringArrayResource(R.array.rewrite_sample_text)

    var textInput by remember { mutableStateOf("") }

    Scaffold(
        modifier = Modifier.fillMaxSize(), topBar = {
            TopAppBar(
                colors = topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.primary,
                ),
                title = {
                    Text(text = stringResource(id = R.string.genai_writing_assistance_title_bar))
                },
                actions = {
                    SeeCodeButton()
                },
            )
        },
    ) { innerPadding ->

        Column(
            Modifier
                .padding(12.dp)
                .padding(innerPadding),
        ) {
            // Text input box
            TextField(
                value = textInput,
                onValueChange = { textInput = it },
                label = { Text(stringResource(id = R.string.genai_writing_assistance_text_input_label)) },
                modifier = Modifier
                    .fillMaxSize()
                    .weight(.8f),
            )

            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {
                // Proofread button
                Button(
                    onClick = {
                        showBottomSheet = true
                        viewModel.proofread(textInput, context)
                    },
                    Modifier.padding(10.dp),
                ) {
                    Text(
                        stringResource(id = R.string.genai_writing_assistance_proofread_btn),
                    )
                }
                Button(
                    onClick = {
                        showRewriteOptionsDialog = true
                    },
                    Modifier.padding(10.dp),
                ) {
                    Text(
                        stringResource(id = R.string.genai_writing_assistance_rewrite_btn),
                    )
                }
            }

            // Extra options buttons
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.Center,
                verticalAlignment = Alignment.CenterVertically,
            ) {
                OutlinedButton(
                    onClick = { textInput = proofreadSampleTextOptions.random() },
                    Modifier.weight(1f).padding(5.dp),
                ) {
                    Text(
                        stringResource(id = R.string.genai_writing_assistance_proofread_sample_text_btn),
                        textAlign = TextAlign.Center,
                    )
                }

                OutlinedButton(
                    onClick = { textInput = rewriteSampleTextOptions.random() },
                    Modifier.weight(1f).padding(5.dp),
                ) {
                    Text(
                        stringResource(id = R.string.genai_writing_assistance_rewrite_sample_text_btn),
                        textAlign = TextAlign.Center,
                    )
                }

                OutlinedButton(
                    onClick = { textInput = "" },
                    Modifier.weight(1f).padding(5.dp),
                ) {
                    Text(
                        stringResource(id = R.string.genai_writing_assistance_reset_btn),
                        textAlign = TextAlign.Center,
                    )
                }
            }
        }

        if (showBottomSheet) {
            ModalBottomSheet(
                onDismissRequest = {
                    showBottomSheet = false
                    viewModel.clearGeneratedText()
                },
                sheetState = sheetState,
            ) {
                Text(
                    text = resultGenerated.value,
                    modifier = Modifier.padding(
                        top = 8.dp,
                        bottom = 24.dp,
                        start = 24.dp,
                        end = 24.dp,
                    ),
                )
            }
        }

        if (showRewriteOptionsDialog) {
            RewriteOptionsDialog(
                onConfirm = { rewriteStyleSelected ->
                    showRewriteOptionsDialog = false
                    showBottomSheet = true
                    viewModel.rewrite(
                        textInput,
                        rewriteStyleSelected.rewriteStyle,
                        context,
                    )
                },
                onDismissRequest = {
                    showRewriteOptionsDialog = false
                },
            )
        }
    }
}

@Composable
fun RewriteOptionsDialog(onConfirm: (rewriteStyle: RewriteStyle) -> Unit, onDismissRequest: () -> Unit, modifier: Modifier = Modifier) {
    Dialog(onDismissRequest = { onDismissRequest() }) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            shape = RoundedCornerShape(16.dp),
        ) {
            val radioOptions = RewriteStyle.entries
            val (selectedOption, onOptionSelected) = remember { mutableStateOf(radioOptions[0]) }
            Column(modifier.selectableGroup()) {
                radioOptions.forEach { option ->
                    Row(
                        Modifier
                            .fillMaxWidth()
                            .height(56.dp)
                            .selectable(
                                selected = (option == selectedOption),
                                onClick = { onOptionSelected(option) },
                                role = Role.RadioButton,
                            )
                            .padding(horizontal = 16.dp),
                        verticalAlignment = Alignment.CenterVertically,
                    ) {
                        RadioButton(
                            selected = (option == selectedOption),
                            onClick = null, // null recommended for accessibility with screen readers
                        )
                        Text(
                            text = option.displayName,
                            style = MaterialTheme.typography.bodyLarge,
                            modifier = Modifier.padding(start = 16.dp),
                        )
                    }
                }

                Row(
                    modifier = Modifier
                        .fillMaxWidth(),
                    horizontalArrangement = Arrangement.Center,
                ) {
                    TextButton(
                        onClick = { onDismissRequest() },
                        modifier = Modifier.padding(8.dp),
                    ) {
                        Text(stringResource(id = R.string.genai_writing_assistance_dismiss_btn))
                    }
                    TextButton(
                        onClick = {
                            onConfirm(selectedOption)
                        },
                        modifier = Modifier.padding(8.dp),
                    ) {
                        Text(stringResource(id = R.string.genai_writing_assistance_confirm_btn))
                    }
                }
            }
        }
    }
}

@Composable
fun SeeCodeButton() {
    val context = LocalContext.current
    val githubLink = "https://github.com/android/ai-samples/tree/main/ai-catalog/samples/genai-writing-assistance"

    Button(
        onClick = {
            val intent = Intent(Intent.ACTION_VIEW, githubLink.toUri())
            context.startActivity(intent)
        },
        modifier = Modifier.padding(end = 8.dp),
    ) {
        Icon(Icons.Filled.Code, contentDescription = "See code")
        Text(
            modifier = Modifier.padding(start = 8.dp),
            fontSize = 12.sp,
            text = stringResource(R.string.genai_writing_assistance_see_code),
        )
    }
}

enum class RewriteStyle(
    val rewriteStyle: Int,
    val displayName: String,
) {
    ELABORATE(RewriterOptions.OutputType.ELABORATE, "Elaborate"),
    EMOJIFY(RewriterOptions.OutputType.EMOJIFY, "Emojify"),
    SHORTEN(RewriterOptions.OutputType.SHORTEN, "Shorten"),
    FRIENDLY(RewriterOptions.OutputType.FRIENDLY, "Friendly"),
    PROFESSIONAL(RewriterOptions.OutputType.PROFESSIONAL, "Professional"),
    REPHRASE(RewriterOptions.OutputType.REPHRASE, "Rephrase"),
}


--- END OF FILE samples/genai-writing-assistance/src/main/java/com/android/ai/samples/genai_writing_assistance/GenAIWritingAssistanceScreen.kt ---


--- START OF FILE samples/genai-writing-assistance/src/main/java/com/android/ai/samples/genai_writing_assistance/GenAIWritingAssistanceViewModel.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.genai_writing_assistance

import android.content.Context
import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.ai.samples.geminimultimodal.R
import com.google.mlkit.genai.common.FeatureStatus
import com.google.mlkit.genai.proofreading.Proofreader
import com.google.mlkit.genai.proofreading.ProofreaderOptions
import com.google.mlkit.genai.proofreading.Proofreading
import com.google.mlkit.genai.proofreading.ProofreadingRequest
import com.google.mlkit.genai.rewriting.Rewriter
import com.google.mlkit.genai.rewriting.RewriterOptions
import com.google.mlkit.genai.rewriting.Rewriting
import com.google.mlkit.genai.rewriting.RewritingRequest
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.guava.await
import kotlinx.coroutines.launch

class GenAIWritingAssistanceViewModel @Inject constructor() : ViewModel() {
    private val _resultGenerated = MutableStateFlow("")
    val resultGenerated: StateFlow<String> = _resultGenerated

    private var proofreader: Proofreader? = null
    private var rewriter: Rewriter? = null

    fun proofread(text: String, context: Context) {
        if (text.isEmpty()) {
            _resultGenerated.value = context.getString(R.string.genai_writing_assistance_no_input)
            return
        }

        val proofreadOptions = ProofreaderOptions.builder(context)
            .setLanguage(ProofreaderOptions.Language.ENGLISH)
            // If input was transcript of speech-to-text, this should be InputType.SPEECH
            .setInputType(ProofreaderOptions.InputType.KEYBOARD)
            .build()

        proofreader = Proofreading.getClient(proofreadOptions)

        viewModelScope.launch {
            proofreader?.let { proofreader ->

                var proofreadFeatureStatus = FeatureStatus.UNAVAILABLE

                try {
                    proofreadFeatureStatus = proofreader.checkFeatureStatus().await()
                } catch (error: Exception) {
                    Log.e("GenAIProofread", "Error checking feature status", error)
                }

                if (proofreadFeatureStatus == FeatureStatus.UNAVAILABLE) {
                    _resultGenerated.value =
                        context.getString(R.string.genai_writing_assistance_not_available)
                    return@launch
                }

                // If feature is downloadable, making an inference call will automatically start
                // the downloading process.
                // If feature is downloading, the inference request will automatically execute after
                // the feature has been downloaded.
                // Alternatively, you can call proofreader.downloadFeature() to monitor the
                // progress of the download.
                if (proofreadFeatureStatus == FeatureStatus.DOWNLOADABLE ||
                    proofreadFeatureStatus == FeatureStatus.DOWNLOADING
                ) {
                    _resultGenerated.value =
                        context.getString(R.string.genai_writing_assistance_downloading)
                }

                val proofreadRequest = ProofreadingRequest.builder(text).build()
                // More than 1 result may be generated. Results are returned in descending order of
                // quality of confidence. Here we use the first result which has the highest quality
                // of confidence.
                val results = proofreader.runInference(proofreadRequest).await()
                _resultGenerated.value = results.results[0].text
                return@launch
            }
        }
    }

    fun rewrite(text: String, rewriteStyle: Int, context: Context) {
        if (text.isEmpty()) {
            _resultGenerated.value = context.getString(R.string.genai_writing_assistance_no_input)
            return
        }

        val rewriteOptions = RewriterOptions.builder(context)
            .setLanguage(RewriterOptions.Language.ENGLISH)
            .setOutputType(rewriteStyle)
            .build()

        rewriter = Rewriting.getClient(rewriteOptions)

        viewModelScope.launch {
            rewriter?.let { rewriter ->
                var rewriteFeatureStatus = FeatureStatus.UNAVAILABLE

                try {
                    rewriteFeatureStatus = rewriter.checkFeatureStatus().await()
                } catch (error: Exception) {
                    Log.e("GenAIRewrite", "Error checking feature status", error)
                }

                if (rewriteFeatureStatus == FeatureStatus.UNAVAILABLE) {
                    _resultGenerated.value =
                        context.getString(R.string.genai_writing_assistance_not_available)
                    return@launch
                }

                // If feature is downloadable, making an inference call will automatically start
                // the downloading process.
                // If feature is downloading, the inference request will automatically execute after
                // the feature has been downloaded.
                // Alternatively, you can call rewriter.downloadFeature() to monitor the
                // progress of the download.
                if (rewriteFeatureStatus == FeatureStatus.DOWNLOADABLE ||
                    rewriteFeatureStatus == FeatureStatus.DOWNLOADING
                ) {
                    _resultGenerated.value =
                        context.getString(R.string.genai_writing_assistance_downloading)
                }

                val rewriteRequest = RewritingRequest.builder(text).build()
                // More than 1 result may be generated. Results are returned in descending order of
                // quality of confidence. Here we use the first result which has the highest quality of
                // confidence.
                val results = rewriter.runInference(rewriteRequest).await()
                _resultGenerated.value = results.results[0].text
                return@launch
            }
        }
    }

    fun clearGeneratedText() {
        _resultGenerated.value = ""
    }

    override fun onCleared() {
        proofreader?.close()
        rewriter?.close()
    }
}


--- END OF FILE samples/genai-writing-assistance/src/main/java/com/android/ai/samples/genai_writing_assistance/GenAIWritingAssistanceViewModel.kt ---


--- START OF FILE samples/genai-writing-assistance/src/main/res/values/strings.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="genai_writing_assistance_title_bar">Writing Assistance with Nano</string>
    <string name="genai_writing_assistance_text_input_label">Enter text for writing assistance</string>
    <string name="genai_writing_assistance_proofread_btn">Proofread</string>
    <string name="genai_writing_assistance_rewrite_btn">Rewrite</string>
    <string name="genai_writing_assistance_dismiss_btn">Dismiss</string>
    <string name="genai_writing_assistance_confirm_btn">Confirm</string>
    <string name="genai_writing_assistance_proofread_sample_text_btn">Add text to proofread</string>
    <string name="genai_writing_assistance_rewrite_sample_text_btn">Add text to rewrite</string>
    <string-array name="proofread_sample_text">
        <item>@string/genai_proofread_sample_text_1</item>
        <item>@string/genai_proofread_sample_text_2</item>
        <item>@string/genai_proofread_sample_text_3</item>
    </string-array>
    <string name="genai_proofread_sample_text_1">Their are many reasons why effectiv comunication is importent; it ensures youre message is recieved correctly and avoids confusing. A good proofreading tool can catch embarassing errors that we often miss ourselves, helping to polish our writing so it shines.</string>
    <string name="genai_proofread_sample_text_2">Yesterday, we visitted the city zoo, an amazing place too sea wild animuls from all over the world. We saw proud lyons, tall giraffes, and even sum playful monkeys swingin in theyre enclosures which was alot of fun.</string>
    <string name="genai_proofread_sample_text_3">My freind and I just grabed sum boba from that new place downtown, there tapioca perls are so chewy and tasty. </string>
    <string-array name="rewrite_sample_text">
        <item>@string/genai_rewrite_sample_text_1</item>
        <item>@string/genai_rewrite_sample_text_2</item>
        <item>@string/genai_rewrite_sample_text_3</item>
    </string-array>
    <string name="genai_rewrite_sample_text_1">I was thinking maybe we could potentially get together sometime soon to catch up with each other. Let me know if that is something that would work for you in your schedule.</string>
    <string name="genai_rewrite_sample_text_2">Regarding the report you finished recently, I wanted to mention that some parts of it were a little bit unclear and I had some difficulty understanding what you were trying to say in those sections. Maybe you could try to explain things more simply next time you write something like this.</string>
    <string name="genai_rewrite_sample_text_3">Hey, how are things going with you at the moment? Just wanted to check in and see what you have been up to recently and if everything is okay.</string>
    <string name="genai_writing_assistance_reset_btn">Reset</string>

    <string name="genai_writing_assistance_no_input">No text inputted</string>
    <string name="genai_writing_assistance_not_available">Feature is not available on this device</string>
    <string name="genai_writing_assistance_downloading">Downloading feature</string>
    <string name="genai_writing_assistance_see_code">See code</string>
</resources>


--- END OF FILE samples/genai-writing-assistance/src/main/res/values/strings.xml ---


--- START OF FILE samples/imagen/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.android.ai.samples.imagen"
    compileSdk = 35

    buildFeatures {
        compose = true
    }

    defaultConfig {
        minSdk = 24

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    lint {
        warningsAsErrors = true
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.material3)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.material.icons.extended)
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.ai)
    implementation(libs.hilt.android)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.runtime.livedata)
    implementation(libs.ui.tooling.preview)
    debugImplementation(libs.ui.tooling)
    ksp(libs.hilt.compiler)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}


--- END OF FILE samples/imagen/build.gradle.kts ---


--- START OF FILE samples/imagen/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

--- END OF FILE samples/imagen/proguard-rules.pro ---


--- START OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/data/ImagenDataSource.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.imagen.data

import android.graphics.Bitmap
import com.google.firebase.Firebase
import com.google.firebase.ai.ai
import com.google.firebase.ai.type.GenerativeBackend
import com.google.firebase.ai.type.ImagenAspectRatio
import com.google.firebase.ai.type.ImagenGenerationConfig
import com.google.firebase.ai.type.ImagenImageFormat
import com.google.firebase.ai.type.PublicPreviewAPI
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class ImagenDataSource @Inject constructor() {
    @OptIn(PublicPreviewAPI::class)
    private val imagenModel = Firebase.ai(backend = GenerativeBackend.vertexAI()).imagenModel(
        modelName = "imagen-4.0-generate-preview-06-06",
        generationConfig = ImagenGenerationConfig(
            numberOfImages = 1,
            aspectRatio = ImagenAspectRatio.SQUARE_1x1,
            imageFormat = ImagenImageFormat.jpeg(compressionQuality = 75),
        ),
    )

    @OptIn(PublicPreviewAPI::class)
    suspend fun generateImage(prompt: String): Bitmap {
        val imageResponse = imagenModel.generateImages(
            prompt = prompt,
        )
        val image = imageResponse.images.first()
        return image.asBitmap()
    }
}


--- END OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/data/ImagenDataSource.kt ---


--- START OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/GeneratedContent.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.imagen.ui

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.material3.Card
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import com.android.ai.samples.imagen.R

@Composable
fun GeneratedContent(uiState: ImagenUIState, modifier: Modifier = Modifier) {
    Card(
        modifier = modifier,
    ) {
        when (uiState) {
            ImagenUIState.Initial -> {
                Text(
                    text = stringResource(R.string.imagen_placeholder),
                    modifier = Modifier
                        .fillMaxSize()
                        .wrapContentSize(Alignment.Center),
                    textAlign = TextAlign.Center,
                    style = MaterialTheme.typography.bodySmall,
                )
            }

            ImagenUIState.Loading -> {
                Text(
                    text = stringResource(R.string.generating_label),
                    modifier = Modifier
                        .fillMaxSize()
                        .wrapContentSize(Alignment.Center),
                    textAlign = TextAlign.Center,
                )
            }

            is ImagenUIState.ImageGenerated -> {
                Image(
                    bitmap = uiState.bitmap.asImageBitmap(),
                    contentDescription = uiState.contentDescription,
                    contentScale = ContentScale.Fit,
                    modifier = Modifier.fillMaxSize(),
                )
            }

            is ImagenUIState.Error -> {
                Text(
                    text = uiState.message ?: stringResource(R.string.error_message_unknown),
                    modifier = Modifier
                        .fillMaxSize()
                        .wrapContentSize(Alignment.Center),
                    textAlign = TextAlign.Center,
                )
            }
        }
    }
}


--- END OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/GeneratedContent.kt ---


--- START OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/GenerationInput.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.imagen.ui

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.SmartToy
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp
import com.android.ai.samples.imagen.R

@Composable
fun GenerationInput(onGenerateClick: (String) -> Unit, enabled: Boolean, modifier: Modifier = Modifier) {
    val placeholder = stringResource(R.string.placeholder_prompt)
    var textFieldValue by rememberSaveable { mutableStateOf(placeholder) }

    Column(
        verticalArrangement = Arrangement.spacedBy(8.dp),
        modifier = modifier,
    ) {
        TextField(
            value = textFieldValue,
            onValueChange = { textFieldValue = it },
            label = { Text(stringResource(R.string.prompt_label)) },
            modifier = Modifier.fillMaxWidth(),
            enabled = enabled,
            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Send),
            keyboardActions = KeyboardActions(
                onSend = {
                    onGenerateClick(textFieldValue)
                },
            ),
        )
        Button(
            onClick = {
                onGenerateClick(textFieldValue)
            },
            enabled = enabled,
            contentPadding = ButtonDefaults.ButtonWithIconContentPadding,
            modifier = Modifier.fillMaxWidth(),
        ) {
            Icon(
                Icons.Default.SmartToy,
                contentDescription = null,
                modifier = Modifier.size(ButtonDefaults.IconSize),
            )
            Spacer(Modifier.size(ButtonDefaults.IconSpacing))
            Text(text = stringResource(R.string.generate_button))
        }
    }
}


--- END OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/GenerationInput.kt ---


--- START OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/ImagenScreen.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.imagen.ui

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.ime
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.windowInsetsBottomHeight
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults.topAppBarColors
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.android.ai.samples.imagen.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ImagenScreen(viewModel: ImagenViewModel = hiltViewModel()) {
    val uiState: ImagenUIState by viewModel.uiState.collectAsStateWithLifecycle()

    ImagenScreen(
        uiState = uiState,
        onGenerateClick = viewModel::generateImage,
    )
}

@Composable
@OptIn(ExperimentalMaterial3Api::class)
private fun ImagenScreen(uiState: ImagenUIState, onGenerateClick: (String) -> Unit) {
    val isGenerating = uiState is ImagenUIState.Loading

    Scaffold(
        modifier = Modifier,
        topBar = {
            TopAppBar(
                colors = topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.primary,
                ),
                title = {
                    Text(text = stringResource(R.string.title_image_generation_screen))
                },
                actions = {
                    SeeCodeButton()
                },
            )
        },
    ) { innerPadding ->
        Column(
            Modifier
                .verticalScroll(rememberScrollState())
                .padding(16.dp)
                .padding(innerPadding),
        ) {
            GeneratedContent(
                uiState = uiState,
                modifier = Modifier
                    .fillMaxWidth()
                    .aspectRatio(1f),
            )

            Spacer(modifier = Modifier.height(16.dp))

            GenerationInput(
                onGenerateClick = onGenerateClick,
                enabled = !isGenerating,
                modifier = Modifier.fillMaxWidth(),
            )

            Spacer(Modifier.windowInsetsBottomHeight(WindowInsets.ime))
        }
    }
}

@Preview
@Composable
@OptIn(ExperimentalMaterial3Api::class)
private fun ImagenScreenPreview() {
    ImagenScreen(
        uiState = ImagenUIState.Initial,
        onGenerateClick = {},
    )
}


--- END OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/ImagenScreen.kt ---


--- START OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/ImagenUIState.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.imagen.ui

import android.graphics.Bitmap

sealed interface ImagenUIState {
    data object Initial : ImagenUIState
    data object Loading : ImagenUIState
    data class ImageGenerated(
        val bitmap: Bitmap,
        val contentDescription: String,
    ) : ImagenUIState
    data class Error(val message: String?) : ImagenUIState
}


--- END OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/ImagenUIState.kt ---


--- START OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/ImagenViewModel.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.imagen.ui

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.ai.samples.imagen.data.ImagenDataSource
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

@HiltViewModel
class ImagenViewModel @Inject constructor(private val imagenDataSource: ImagenDataSource) : ViewModel() {

    private val _uiState: MutableStateFlow<ImagenUIState> = MutableStateFlow(ImagenUIState.Initial)
    val uiState: StateFlow<ImagenUIState> = _uiState

    fun generateImage(prompt: String) {
        _uiState.value = ImagenUIState.Loading

        viewModelScope.launch {
            try {
                val bitmap = imagenDataSource.generateImage(prompt)
                _uiState.value = ImagenUIState.ImageGenerated(bitmap, contentDescription = prompt)
            } catch (e: Exception) {
                _uiState.value = ImagenUIState.Error(e.message)
            }
        }
    }
}


--- END OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/ImagenViewModel.kt ---


--- START OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/SeeCodeButton.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.imagen.ui

import android.content.Intent
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.core.net.toUri
import com.android.ai.samples.imagen.R

@Composable
fun SeeCodeButton() {
    val context = LocalContext.current
    val githubLink = "https://github.com/android/ai-samples/tree/main/ai-catalog/samples/imagen"
    Button(
        onClick = {
            val intent = Intent(Intent.ACTION_VIEW, githubLink.toUri())
            context.startActivity(intent)
        },
        contentPadding = ButtonDefaults.ButtonWithIconContentPadding,
    ) {
        Icon(Icons.Filled.Code, contentDescription = null)
        Spacer(Modifier.size(ButtonDefaults.IconSpacing))
        Text(
            text = stringResource(R.string.see_code),
        )
    }
}


--- END OF FILE samples/imagen/src/main/java/com/android/ai/samples/imagen/ui/SeeCodeButton.kt ---


--- START OF FILE samples/imagen/src/main/res/values/strings.xml ---

<?xml version="1.0" encoding="utf-8"?><!--
  ~ Copyright 2025 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
  -->

<resources>
    <string name="see_code">See Code</string>
    <string name="placeholder_prompt">An oil painting of Alcatraz</string>
    <string name="title_image_generation_screen">Imagen image generation</string>
    <string name="generate_button">Generate</string>
    <string name="generating_label">Generating…</string>
    <string name="prompt_label">Prompt</string>
    <string name="imagen_placeholder">Enter a prompt and tap \"Generate\" to generate an image</string>
    <string name="error_message_unknown">Unknown error</string>
</resources>

--- END OF FILE samples/imagen/src/main/res/values/strings.xml ---


--- START OF FILE samples/magic-selfie/build.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.compose.compiler)
}

android {
    namespace = "com.android.ai.samples.magicselfie"
    compileSdk = 35

    buildFeatures {
        compose = true
    }

    defaultConfig {
        minSdk = 24

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles("consumer-rules.pro")
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro",
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.15"
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.material.icons.extended)
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.ai)
    implementation(libs.hilt.android)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.runtime.livedata)
    implementation("com.google.android.gms:play-services-mlkit-subject-segmentation:16.0.0-beta1")
    ksp(libs.hilt.compiler)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}


--- END OF FILE samples/magic-selfie/build.gradle.kts ---


--- START OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/data/MagicSelfieRepository.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.magicselfie.data

import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Paint
import com.google.firebase.Firebase
import com.google.firebase.ai.ai
import com.google.firebase.ai.type.GenerativeBackend
import com.google.firebase.ai.type.ImagenAspectRatio
import com.google.firebase.ai.type.ImagenGenerationConfig
import com.google.firebase.ai.type.ImagenImageFormat
import com.google.firebase.ai.type.PublicPreviewAPI
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.segmentation.subject.SubjectSegmentation
import com.google.mlkit.vision.segmentation.subject.SubjectSegmenterOptions
import javax.inject.Inject
import javax.inject.Singleton
import kotlin.coroutines.suspendCoroutine
import kotlin.math.roundToInt

@Singleton
class MagicSelfieRepository @Inject constructor() {
    @OptIn(PublicPreviewAPI::class)
    private val imagenModel = Firebase.ai(backend = GenerativeBackend.vertexAI()).imagenModel(
        modelName = "imagen-4.0-generate-preview-06-06",
        generationConfig = ImagenGenerationConfig(
            numberOfImages = 1,
            aspectRatio = ImagenAspectRatio.PORTRAIT_3x4,
            imageFormat = ImagenImageFormat.jpeg(compressionQuality = 75),
        ),
    )

    private val subjectSegmenter = SubjectSegmentation.getClient(
        SubjectSegmenterOptions.Builder()
            .enableForegroundBitmap()
            .build(),
    )

    suspend fun generateForegroundBitmap(bitmap: Bitmap): Bitmap {
        val image = InputImage.fromBitmap(bitmap, 0)
        return suspendCoroutine { continuation ->
            subjectSegmenter.process(image)
                .addOnSuccessListener {
                    it.foregroundBitmap?.let { foregroundBitmap ->
                        continuation.resumeWith(Result.success(foregroundBitmap))
                    }
                }
                .addOnFailureListener {
                    continuation.resumeWith(Result.failure(it))
                }
        }
    }

    @OptIn(PublicPreviewAPI::class)
    suspend fun generateBackground(prompt: String): Bitmap {
        val imageResponse = imagenModel.generateImages(
            prompt = prompt,
        )
        val image = imageResponse.images.first()
        return image.asBitmap()
    }

    fun combineBitmaps(foreground: Bitmap, background: Bitmap): Bitmap {
        val height = background.height
        val width = background.width

        val resultBitmap = Bitmap.createBitmap(width, height, background.config!!)
        val canvas = Canvas(resultBitmap)
        val paint = Paint()
        canvas.drawBitmap(background, 0f, 0f, paint)

        var foregroundHeight = foreground.height
        var foregroundWidth = foreground.width
        val ratio = foregroundWidth.toFloat() / foregroundHeight.toFloat()

        foregroundHeight = height
        foregroundWidth = (foregroundHeight * ratio).roundToInt()

        val scaledForeground = Bitmap.createScaledBitmap(foreground, foregroundWidth, foregroundHeight, false)

        val left = (width - scaledForeground.width) / 2f
        val top = (height - scaledForeground.height.toFloat())
        canvas.drawBitmap(scaledForeground, left, top, paint)

        return resultBitmap
    }
}


--- END OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/data/MagicSelfieRepository.kt ---


--- START OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/ImageUtils.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.magicselfie.ui

import android.graphics.Bitmap
import android.graphics.Matrix
import android.media.ExifInterface
import java.io.File

fun rotateImageIfRequired(imageFile: File, bitmap: Bitmap): Bitmap {
    val ei = ExifInterface(imageFile.absolutePath)
    val orientation = ei.getAttributeInt(
        ExifInterface.TAG_ORIENTATION,
        ExifInterface.ORIENTATION_NORMAL,
    )

    return when (orientation) {
        ExifInterface.ORIENTATION_ROTATE_90 -> rotateImage(bitmap, 90f)
        ExifInterface.ORIENTATION_ROTATE_180 -> rotateImage(bitmap, 180f)
        ExifInterface.ORIENTATION_ROTATE_270 -> rotateImage(bitmap, 270f)
        ExifInterface.ORIENTATION_FLIP_HORIZONTAL -> flipImage(bitmap, true, false)
        ExifInterface.ORIENTATION_FLIP_VERTICAL -> flipImage(bitmap, false, true)
        ExifInterface.ORIENTATION_TRANSPOSE -> flipImage(rotateImage(bitmap, 90f), true, false)
        ExifInterface.ORIENTATION_TRANSVERSE -> flipImage(rotateImage(bitmap, 270f), true, false)
        else -> bitmap
    }
}

fun rotateImage(bitmap: Bitmap, degrees: Float): Bitmap {
    val matrix = Matrix()
    matrix.postRotate(degrees)
    return Bitmap.createBitmap(bitmap, 0, 0, bitmap.width, bitmap.height, matrix, true)
}

fun flipImage(bitmap: Bitmap, horizontal: Boolean, vertical: Boolean): Bitmap {
    val matrix = Matrix()
    val scaleX = if (horizontal) -1f else 1f
    val scaleY = if (vertical) -1f else 1f
    matrix.setScale(scaleX, scaleY)
    return Bitmap.createBitmap(bitmap, 0, 0, bitmap.width, bitmap.height, matrix, true)
}


--- END OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/ImageUtils.kt ---


--- START OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/MagicSelfieScreen.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.magicselfie.ui

import android.annotation.SuppressLint
import android.app.Activity
import android.content.Intent
import android.graphics.Bitmap
import android.provider.MediaStore
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.ActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.imePadding
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.CameraAlt
import androidx.compose.material.icons.filled.SmartToy
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.material3.TopAppBarDefaults.topAppBarColors
import androidx.compose.material3.rememberTopAppBarState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.core.content.FileProvider
import androidx.hilt.navigation.compose.hiltViewModel
import com.android.ai.samples.magicselfie.R
import java.io.File

@OptIn(ExperimentalMaterial3Api::class)
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@Composable
fun MagicSelfieScreen(viewModel: MagicSelfieViewModel = hiltViewModel()) {
    val context = LocalContext.current
    val uiState by viewModel.uiState.collectAsState()

    val topAppBarState = rememberTopAppBarState()
    val scrollBehavior = TopAppBarDefaults.pinnedScrollBehavior(topAppBarState)

    val cameraIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
    cameraIntent.putExtra("android.intent.extras.CAMERA_FACING", android.hardware.camera2.CameraCharacteristics.LENS_FACING_FRONT)
    cameraIntent.putExtra("android.intent.extras.LENS_FACING_FRONT", 1)
    cameraIntent.putExtra("android.intent.extra.USE_FRONT_CAMERA", true)
    val currentContext = LocalContext.current
    val tempSelfiePhoto = File.createTempFile("tmp_selfie_picture", ".jpg", currentContext.cacheDir)
    val tempSelfiePhotoUri = FileProvider.getUriForFile(currentContext, currentContext.packageName + ".provider", tempSelfiePhoto)

    cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, tempSelfiePhotoUri)
    cameraIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)

    var selfieBitmap by remember { mutableStateOf<Bitmap?>(null) }
    var editTextValue by remember { mutableStateOf("A very scenic view from the edge of the grand canyon") }

    val resultLauncher =
        rememberLauncherForActivityResult(ActivityResultContracts.StartActivityForResult()) { result: ActivityResult ->
            if (result.resultCode == Activity.RESULT_OK) {
                selfieBitmap = rotateImageIfRequired(
                    tempSelfiePhoto,
                    MediaStore.Images.Media.getBitmap(currentContext.contentResolver, tempSelfiePhotoUri),
                )
            }
        }

    Scaffold(
        modifier = Modifier
            .fillMaxSize()
            .nestedScroll(scrollBehavior.nestedScrollConnection),
        topBar = {
            TopAppBar(
                colors = topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.primary,
                ),
                title = {
                    Text(text = stringResource(id = R.string.magic_selfie))
                },
                actions = {
                    SeeCodeButton(context)
                },
            )
        },
    ) { innerPadding ->
        Column(
            Modifier
                .padding(12.dp)
                .padding(innerPadding)
                .imePadding()
                .verticalScroll(rememberScrollState()),
        ) {
            Card(
                modifier = Modifier
                    .size(
                        width = 450.dp,
                        height = 450.dp,
                    ),
            ) {
                if (uiState is MagicSelfieUiState.Success) {
                    val successState = uiState as MagicSelfieUiState.Success
                    Image(
                        bitmap = successState.bitmap.asImageBitmap(),
                        contentDescription = "Picture",
                        contentScale = ContentScale.Crop,
                        modifier = Modifier.fillMaxSize(),
                    )
                } else if (selfieBitmap != null) {
                    Image(
                        bitmap = selfieBitmap!!.asImageBitmap(),
                        contentDescription = "Picture",
                        contentScale = ContentScale.Fit,
                        modifier = Modifier.fillMaxWidth(),
                    )
                }
            }
            Spacer(modifier = Modifier.height(6.dp))
            Row(horizontalArrangement = Arrangement.Center, modifier = Modifier.fillMaxWidth()) {
                Button(
                    onClick = {
                        resultLauncher.launch(cameraIntent)
                    },
                ) {
                    Icon(Icons.Default.CameraAlt, contentDescription = "Camera")
                }
            }
            Spacer(modifier = Modifier.height(24.dp))

            TextField(
                value = editTextValue,
                onValueChange = { editTextValue = it },
                label = { Text("Prompt") },
            )

            Button(
                modifier = Modifier.padding(vertical = 8.dp),
                onClick = {
                    if (selfieBitmap != null) {
                        viewModel.createMagicSelfie(selfieBitmap!!, editTextValue)
                    }
                },
                enabled = (uiState !is MagicSelfieUiState.RemovingBackground) &&
                    (uiState !is MagicSelfieUiState.GeneratingBackground),
            ) {
                Icon(Icons.Default.SmartToy, contentDescription = "Robot")
                Text(modifier = Modifier.padding(start = 8.dp), text = "Generate")
            }

            if (uiState is MagicSelfieUiState.RemovingBackground) {
                Spacer(
                    modifier = Modifier
                        .height(30.dp)
                        .padding(12.dp),
                )
                Text(
                    text = stringResource(R.string.removing_background),
                )
            } else if (uiState is MagicSelfieUiState.GeneratingBackground) {
                Spacer(
                    modifier = Modifier
                        .height(30.dp)
                        .padding(12.dp),
                )
                Text(
                    text = stringResource(R.string.generating_new_background),
                )
            } else if (uiState is MagicSelfieUiState.Error) {
                val errorState = uiState as MagicSelfieUiState.Error
                Spacer(
                    modifier = Modifier
                        .height(30.dp)
                        .padding(12.dp),
                )
                Text(
                    text = errorState.message ?: stringResource(R.string.unknown_error),
                    color = MaterialTheme.colorScheme.error,
                )
            }
        }
    }
}


--- END OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/MagicSelfieScreen.kt ---


--- START OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/MagicSelfieUiState.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.magicselfie.ui

import android.graphics.Bitmap

sealed interface MagicSelfieUiState {
    data object Initial : MagicSelfieUiState
    data object RemovingBackground : MagicSelfieUiState
    data object GeneratingBackground : MagicSelfieUiState
    data class Success(val bitmap: Bitmap) : MagicSelfieUiState
    data class Error(val message: String?) : MagicSelfieUiState
}


--- END OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/MagicSelfieUiState.kt ---


--- START OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/MagicSelfieViewModel.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.magicselfie.ui

import android.graphics.Bitmap
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.android.ai.samples.magicselfie.data.MagicSelfieRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

@HiltViewModel
class MagicSelfieViewModel @Inject constructor(private val magicSelfieRepository: MagicSelfieRepository) : ViewModel() {

    private val _uiState = MutableStateFlow<MagicSelfieUiState>(MagicSelfieUiState.Initial)
    val uiState: StateFlow<MagicSelfieUiState> = _uiState

    fun createMagicSelfie(bitmap: Bitmap, prompt: String) {
        viewModelScope.launch {
            try {
                _uiState.value = MagicSelfieUiState.RemovingBackground
                val foregroundBitmap = magicSelfieRepository.generateForegroundBitmap(bitmap)
                _uiState.value = MagicSelfieUiState.GeneratingBackground
                val backgroundBitmap = magicSelfieRepository.generateBackground(prompt)
                val resultBitmap = magicSelfieRepository.combineBitmaps(foregroundBitmap, backgroundBitmap)
                _uiState.value = MagicSelfieUiState.Success(resultBitmap)
            } catch (e: Exception) {
                _uiState.value = MagicSelfieUiState.Error(e.message)
            }
        }
    }
}


--- END OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/MagicSelfieViewModel.kt ---


--- START OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/SeeCodeButton.kt ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.ai.samples.magicselfie.ui

import android.content.Context
import android.content.Intent
import android.net.Uri
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.android.ai.samples.magicselfie.R

@Composable
fun SeeCodeButton(context: Context) {
    val githubLink = "https://github.com/android/ai-samples/tree/main/ai-catalog/samples/magic-selfie"
    Button(
        onClick = {
            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(githubLink))
            context.startActivity(intent)
        },
        modifier = Modifier.padding(end = 8.dp),
    ) {
        Icon(Icons.Filled.Code, contentDescription = stringResource(R.string.see_code))
        Text(
            modifier = Modifier.padding(start = 8.dp),
            fontSize = 12.sp,
            text = stringResource(R.string.see_code),
        )
    }
}


--- END OF FILE samples/magic-selfie/src/main/java/com/android/ai/samples/magicselfie/ui/SeeCodeButton.kt ---


--- START OF FILE samples/magic-selfie/src/main/res/values/strings.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="magic_selfie">Magic Selfie</string>
    <string name="see_code">See code</string>
    <string name="share_image">Share image</string>
    <string name="unknown_error">Unknown error</string>
    <string name="removing_background">Removing background...</string>
    <string name="generating_new_background">Generating new background...</string>
</resources>

--- END OF FILE samples/magic-selfie/src/main/res/values/strings.xml ---


--- START OF FILE settings.gradle.kts ---

/*
 * Copyright 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "AI Sample Catalog"
include(":app")
include(":samples:gemini-multimodal")
include(":samples:gemini-chatbot")
include(":samples:genai-summarization")
include(":samples:genai-writing-assistance")
include(":samples:genai-image-description")
include(":samples:imagen")
include(":samples:magic-selfie")
include(":samples:gemini-video-summarization")
include(":samples:gemini-live-todo")


--- END OF FILE settings.gradle.kts ---


--- START OF FILE spotless/copyright.kt ---

/*
 * Copyright $YEAR The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

--- END OF FILE spotless/copyright.kt ---
